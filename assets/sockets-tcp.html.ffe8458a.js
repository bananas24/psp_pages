import{_ as i,a as A,b as d,c as y,d as u,e as v}from"./multithread_server_sequence.7901f27a.js";import{_ as m,r as p,o as B,c as D,d as a,a as s,w as o,b as n,f as t}from"./app.33df6748.js";const E={},b=s("h1",{id:"_4-3-tcp-sockets",tabindex:"-1"},"4.3 TCP Sockets",-1),h={class:"table-of-contents"},g=n("4.3.1. Comunicaci\xF3n cliente/servidor con sockets TCP"),f=n("Programaci\xF3n de aplicaciones Cliente y/o Servidor"),_=n("4.3.2. Cliente TCP"),S=n("Streams para E/S en los sockets"),q=n("4.3.3 Servidor TCP"),k=n("4.3.4 Servidor multihilo"),C=s("h2",{id:"_4-3-1-comunicacion-cliente-servidor-con-sockets-tcp",tabindex:"-1"},"4.3.1. Comunicaci\xF3n cliente/servidor con sockets TCP",-1),w=s("p",null,"Oracle ha resumido el uso de los sockets en un breve tutorial. Todo lo que podemos ver en ese tutorial lo vamos a ir comentando y ampliando en este apartado del tema",-1),x={href:"https://docs.oracle.com/javase/tutorial/networking/sockets/index.html",target:"_blank",rel:"noopener noreferrer"},j=n("Tutorial de Oracle: All about sockets"),O=t('<p>La interfaz Java que da soporte a sockets TCP est\xE1 constituida por las clases <strong>ServerSocket</strong> y <strong>Socket</strong>.</p><ul><li><p>ServerSocket: es utilizada por un servidor para crear un socket en el puerto en el que escucha las peticiones de conexi\xF3n de los clientes. Su m\xE9todo <code>accept</code> toma una petici\xF3n de conexi\xF3n de la cola, o si la cola est\xE1 vac\xEDa, se bloquea hasta que llega una petici\xF3n.</p><p>El resultado de ejecutar accept es una instancia de Socket, a trav\xE9s del cual el servidor tiene acceso a los datos enviados por el cliente.</p></li><li><p>Socket: es utilizada tanto por el cliente como por el servidor. El cliente crea un socket especificando el nombre DNS del host y el puerto del servidor, as\xED se crea el socket local y adem\xE1s se conecta con el servicio.</p><p>Esta clase proporciona los m\xE9todos <code>getInputStream</code> y <code>getOutputStream</code> para acceder a los dos streams asociados a un socket (recordemos que son bidireccionales), y devuelve tipos de datos InputStream y OutputStream, respectivamente, a partir de los cuales podemos construir <code>BufferedReader</code> y <code>PrintWriter</code>, respectivamente, para poder procesar los datos de forma m\xE1s sencilla.</p></li></ul><h3 id="programacion-de-aplicaciones-cliente-y-o-servidor" tabindex="-1">Programaci\xF3n de aplicaciones Cliente y/o Servidor</h3><p>Al crear aplicaciones cliente y servidor puede que nos encontremos con varios escenarios, a saber:</p><ul><li>Si tenemos que programar solo el servidor <strong>deberemos definir un protocolo</strong> de comunicaci\xF3n para usar ese servidor.</li><li>Si tenemos que programar solo el cliente <strong>necesitaremos conocer el protocolo</strong> de comunicaci\xF3n para conectar con ese servidor.</li><li>Si tenemos que programar el cliente y el servidor, tendremos que empezar por <strong>definir el protocolo</strong> de comunicaci\xF3n entre ambos.</li></ul>',5),I={class:"custom-container info"},P=s("p",{class:"custom-container-title"},"Herramientas para definir los protocolos",-1),F=s("p",null,"Dentro de todos los diagramas que ofrece UML, el diagrama de secuencia es el que mejor se adapta para definir los protocolos de comunicaci\xF3n entre clases y las interacciones que se producen.",-1),T=s("p",null,"Para crear estos diagramas existen multitud de herramientas, tanto de escritorio como online. De todas ellas cabe destacar:",-1),R={href:"https://mermaid.live/",target:"_blank",rel:"noopener noreferrer"},L=n("Mermaid Live editor"),W=n(" que usa una "),z={href:"https://mermaid-js.github.io/mermaid/#/sequenceDiagram",target:"_blank",rel:"noopener noreferrer"},N=n("sintaxis en modo texto"),U=n(" para definir los diagramas."),X={href:"https://www.websequencediagrams.com/",target:"_blank",rel:"noopener noreferrer"},M=n("WebSequenceDiagrams"),H=n(": M\xE1s visual y tambi\xE9n con una definici\xF3n textual de los diagramas."),J={href:"https://online.visual-paradigm.com/drive/#diagramlist:proj=0&dashboard",target:"_blank",rel:"noopener noreferrer"},V=n("Visual Paradigm Online"),$=n(": Herramienta totalmente visual y con unos resultados m\xE1s espectaculares."),Q=s("p",null,"Estas herramientas son las que ten\xE9is que usar en las actividades en las que se os pida definir un protocolo de comunicaci\xF3n cliente / servidor.",-1),G=t(`<h2 id="_4-3-2-cliente-tcp" tabindex="-1">4.3.2. Cliente TCP</h2><p>Si nos centramos en la parte de comunicaciones, la forma general de implementar un cliente ser\xE1:</p><ol><li>Crear un objeto de la clase Socket, indicando host y puerto donde corre el servicio.</li><li>Obtener las referencias al stream de entrada y al de salida al socket.</li><li>Leer desde y escribir en el stream de acuerdo al protocolo del servicio. Para ello emplear alguna de las facilidades del paquete java.io.</li><li>Cerrar los streams.</li><li>Cerrar el socket.</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">BasicClient</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">main</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> args</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">throws</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">Socket</span><span style="color:#90A4AE;"> socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> entrada </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">PrintWriter</span><span style="color:#90A4AE;"> salida </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// Creamos un socket en el lado cliente, enlazado con un</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// servidor que est\xE1 en la misma m\xE1quina que el cliente</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// y que escucha en el puerto 4444</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">Socket</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">localhost</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">4444</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Obtenemos el canal de entrada</span></span>
<span class="line"><span style="color:#90A4AE;">            entrada </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">()));</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Obtenemos el canal de salida</span></span>
<span class="line"><span style="color:#90A4AE;">            salida </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">PrintWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                            </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">OutputStreamWriter</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getOutputStream</span><span style="color:#39ADB5;">())),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">true);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">err</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">No puede establecer canales de E/S para la conexi\xF3n</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">exit</span><span style="color:#39ADB5;">(-</span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">Scanner</span><span style="color:#90A4AE;"> stdIn </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">Scanner</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">in</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// El programa cliente no analiza los mensajes enviados por el</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// usuario, simplemente los reenv\xEDa al servidor hasta que este</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// se despide con &quot;Adios&quot;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(true)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Leo la entrada del usuario</span></span>
<span class="line"><span style="color:#90A4AE;">                linea </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> stdIn</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">nextLine</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// La envia al servidor por el OutputStream</span></span>
<span class="line"><span style="color:#90A4AE;">                salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">linea</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Recibe la respuesta del servidor por el InputStream</span></span>
<span class="line"><span style="color:#90A4AE;">                linea </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> entrada</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Env\xEDa a la salida est\xE1ndar la respuesta del servidor</span></span>
<span class="line"><span style="color:#90A4AE;">                System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Respuesta servidor: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Si es &quot;Adios&quot; es que finaliza la comunicaci\xF3n</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#39ADB5;font-style:italic;">if</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">linea</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">equals</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Adios</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">))</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">break</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">IOException: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> e</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getMessage</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// Libera recursos</span></span>
<span class="line"><span style="color:#90A4AE;">        salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        entrada</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        stdIn</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><div class="highlight-line">\xA0</div><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><div class="highlight-line">\xA0</div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Y={class:"custom-container info"},K=s("p",{class:"custom-container-title"},"Herramientas para simular clientes gen\xE9ricos",-1),Z=s("p",null,"Si s\xF3lo tenemos que desarrollar un servidor y no tenemos o no queremos hacer un cliente para las pruebas, tenemos varias herramientas que nos ayudan a hacer de clientes gen\xE9ricos, \xFAtiles para una gran variedad de servidores, incluso para servidores est\xE1ndar como FTP, HTTP, etc.",-1),ss=s("p",null,[n("La primera herramienta es una aplicaci\xF3n y un protocolo de nivel de aplicaci\xF3n de TCP/IP, es la herramienta "),s("code",null,"Telnet"),n(".")],-1),ns=s("p",null,"Esta herramienta suele venir instalada en los sistemas GNU/Linux y OS X. Sin embargo en los sistemas Windows viene deshabilitada por defecto.",-1),as=n("Os dejo un enlace al art\xEDculo de Xataka "),ls={href:"https://www.xataka.com/basics/telnet-que-como-activarlo-windows-10",target:"_blank",rel:"noopener noreferrer"},es=n("Telnet: qu\xE9 es y c\xF3mo activarlo en Windows 10"),os=n("."),ps=s("p",null,"Es importante que lo activ\xE9is tanto en clase como en el aula.",-1),ts=s("p",null,"La segunda herramienta es NetCat. Es una herramienta muy vers\xE1til y potente, ya que no s\xF3lo puede hacernos de cliente, sino que tambi\xE9n puede servir como servidor.",-1),rs=s("p",null,[n("Como muchas otras herramientas, esta tambi\xE9n viene instalada de serie en GNU/Linux y OS X, pero no en Windows. Su uso en los sistemas de Microsoft es algo m\xE1s controvertido ya que el sistema la detecta como un virus y tenemos que habilitar su uso en el "),s("em",null,"Guardian"),n(" del SO.")],-1),cs=n("Os dejo tambi\xE9n un enlace a este art\xEDculo de IONOS "),is={href:"https://www.ionos.es/digitalguide/servidores/herramientas/netcat/",target:"_blank",rel:"noopener noreferrer"},As=n("\xBFQu\xE9 es Netcat y c\xF3mo funciona?"),ds=t('<h3 id="streams-para-e-s-en-los-sockets" tabindex="-1">Streams para E/S en los sockets</h3><p>Si vemos ejemplos en Internet o en tutoriales, podemos observar que hay dos formas mayoritarias de enviar y recibir la informaci\xF3n a trav\xE9s de los streams que proporciona un socket.</p><p><img src="'+i+'" alt="Basic Stream IO"></p><p>En cualquier caso, a trav\xE9s de los streams enviamos bytes, que es la forma m\xE1s b\xE1sica de generar informaci\xF3n, bien sea a trav\xE9s de la red o entre procesos.</p><p>Como es complicado gestionar a nivel de bytes toda la informaci\xF3n que queremos enviar o recibir, usamos <code>Decorators</code> o <code>Wrappers</code> para enviar tipos de datos de un nivel de abstracci\xF3n mayor.</p><p>En los temas anteriores, cuando hemos tenido que intercambiar informaci\xF3n entre procesos, hemos estado usando BufferedReader y PrintWriter. Estas clases trabajan a nivel de Strings, y son muy \xFAtiles cuando lo que queremos intercambiar a trav\xE9s de los streams son cadenas de texto.</p><blockquote><p>En los protocolos de comunicaciones, m\xE1s del 90% de la informaci\xF3n que se intercambia, a nivel de protocolo, es en formato texto.</p></blockquote><p>Sin embargo, puede haber ocasiones en las que nos interese trabajar con tipos de datos.</p><p><code>DataInputStream</code> y <code>DataOutputStream</code> proporcionan m\xE9todos para leer y escribir Strings y todos los tipos de datos primitivos de Java, incluyendo n\xFAmeros y valores booleanos.</p><p><img src="'+A+`" alt="Basic Stream IO"></p><p>DataOutputStream codifica esos valores de forma independiente de la m\xE1quina y los env\xEDa al stream de m\xE1s bajo nivel para que los gestione como bytes. DataInputStream hace lo contrario.</p><p>As\xED, podemos trabajar con DataInputStream y DataOutputStream a partir de los streams que nos proporcionan los sockets</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">// C\xF3digo en el cliente</span></span>
<span class="line"><span style="color:#9C3EDA;">DataInputStream</span><span style="color:#90A4AE;"> dis </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">DataInputStream</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socket</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">dis</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readDouble</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// C\xF3digo en el servidor</span></span>
<span class="line"><span style="color:#9C3EDA;">DataOutputStream</span><span style="color:#90A4AE;"> dos </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">DataOutputStream</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socket</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getOutputStream</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">dis</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">writeDouble</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">number</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Los m\xE9todos <code>readUTF()</code> and <code>writeUTF()</code> de DataInputStream y DataOutputStream leen y escriben un String de caracteres Unicode usando la codificaci\xF3n UTF-8.</p><div class="custom-container warning"><p class="custom-container-title">Elige un m\xE9todo y usa siempre el mismo</p><p>Es muy importante no mezclar diferentes wrappers en el mismo sistema. Aunque todos acaban utilizando el InputStream y el OutputStream, las codificaciones y la forma de enviar la informaci\xF3n no es la misma.</p><p>Por lo que, si usas DataInputStream en el cliente para leer, debes usar DataOutputStream en el servidor para enviar. Adem\xE1s de usar los m\xE9todos complementarios para la lectura y escritura, por ejemplo readInt / writeInt.</p></div>`,15),ys=n("Informaci\xF3n extra\xEDda de "),us={href:"https://www.oreilly.com/library/view/learning-java-4th/9781449372477/ch12s01.html",target:"_blank",rel:"noopener noreferrer"},vs=n("Learning Java, 4th Edition - O'Reilly"),ms=t('<div class="pagebreak"></div><h2 id="_4-3-3-servidor-tcp" tabindex="-1">4.3.3 Servidor TCP</h2><p>La forma de implementar un servidor ser\xE1:</p><p><img src="'+d+`" alt="Estados de un servidor monohilo"></p><ol><li>Crear un objeto de la clase ServerSocket para escuchar peticiones en el puerto asignado al servicio.</li><li>Esperar solicitudes de clientes</li><li>Cuando se produce una solicitud: <ul><li>Aceptar la conexi\xF3n obteniendo un objeto de la clase Socket</li><li>Obtener las referencias al stream de entrada y al de salida al socket anterior.</li><li>Leer datos del socket, procesarlos y enviar respuestas al cliente, escribiendo en el stream del socket.Para ello emplear alguna de las facilidades del paquete java.io.</li></ul></li><li>Cerrar los streams.</li><li>Cerrar los sockets.</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">BasicServer</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">final</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> PORT </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">4444</span><span style="color:#39ADB5;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">main</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> args</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">throws</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">        </span><span style="color:#90A4AE;font-style:italic;">// Establece el puerto en el que escucha peticiones</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">ServerSocket</span><span style="color:#90A4AE;"> socketServidor </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            socketServidor </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ServerSocket</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">PORT</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">No puede escuchar en el puerto: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> PORT</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">exit</span><span style="color:#39ADB5;">(-</span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">Socket</span><span style="color:#90A4AE;"> socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> entrada </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">PrintWriter</span><span style="color:#90A4AE;"> salida </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Escuchando: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> socketServidor</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Se bloquea hasta que recibe alguna petici\xF3n de un cliente</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// abriendo un socket para el cliente</span></span>
<span class="line"><span style="color:#90A4AE;">            socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> socketServidor</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">accept</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Conexi\xF3n aceptada: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> socketCliente</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Establece canal de entrada</span></span>
<span class="line"><span style="color:#90A4AE;">            entrada </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">()));</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Establece canal de salida</span></span>
<span class="line"><span style="color:#90A4AE;">            salida </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">PrintWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">                            </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">OutputStreamWriter</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getOutputStream</span><span style="color:#39ADB5;">())),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">true);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Hace eco de lo que le proporciona el cliente, hasta que recibe &quot;Adios&quot;</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(true)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Recibe la solicitud del cliente por el InputStream</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> str </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> entrada</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Env\xEDa a la salida est\xE1ndar el mensaje del cliente</span></span>
<span class="line"><span style="color:#90A4AE;">                System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Cliente: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> str</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Le env\xEDa la respuesta al cliente por el OutputStream                </span></span>
<span class="line"><span style="color:#90A4AE;">                salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">str</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">                </span><span style="color:#90A4AE;font-style:italic;">// Si es &quot;Adios&quot; es que finaliza la comunicaci\xF3n</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#39ADB5;font-style:italic;">if</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">str</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">equals</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Adios</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">))</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">                    </span><span style="color:#39ADB5;font-style:italic;">break</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">                </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">IOException: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> e</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getMessage</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        entrada</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        socketServidor</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><div class="highlight-line">\xA0</div><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Quedando la secuencia de acciones entre el cliente y el servidor de la siguiente manera</p><p><img src="`+y+`" alt="Estados de un servidor monohilo"></p><p>El servidor monohilo se encarga de realizar las operaciones de E/S con el cliente. Hasta que no acaba no puede hacer otro <code>accept</code> y atender a otro cliente.</p><div class="pagebreak"></div><h2 id="_4-3-4-servidor-multihilo" tabindex="-1">4.3.4 Servidor multihilo</h2><p>Si queremos que un servidor pueda atender varias peticiones de forma simultanea, debemos usar hilos para dotarle de esa capacidad.</p><p>El flujo b\xE1sico ahora cambiar\xEDa para adaptarse a este formato</p><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#90A4AE;">while (true) {</span></span>
<span class="line"><span style="color:#90A4AE;"></span></span>
<span class="line"><span style="color:#90A4AE;">    Aceptar la conexi\xF3n obteniendo un objeto de la clase Socket;</span></span>
<span class="line"><span style="color:#90A4AE;"></span></span>
<span class="line"><span style="color:#90A4AE;">    Crear un thread para que se encargue de la comunicaci\xF3n con ese cliente, es decir, </span></span>
<span class="line"><span style="color:#90A4AE;">    para que gestione el socket obtenido en el accept.;</span></span>
<span class="line"><span style="color:#90A4AE;">}</span></span>
<span class="line"><span style="color:#90A4AE;"></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+`" alt="Estados de un servidor multihilo"></p><p>El servidor multihilo crea un nuevo hilo que se encarga de las operaciones de E/S con el cliente. Mientras tanto puede esperar la conexi\xF3n de nuevos clientes con los que volver\xE1 a hacer lo mismo.</p><p>El servidor multihilo se ayuda de una clase <code>Worker</code> que hereda de Thread, pudiendo as\xED ejecutarse concurrentemente con el hilo principal.</p><p>Esta clase <code>Worker</code> es la encargada de realizar toda la comunicaci\xF3n con el cliente y el servidor. Para poder hacerlo, en su constructor recibe el Socket que se crea cuando se recibe la conexi\xF3n de un cliente <code>ServerSocket.accept()</code>.</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">final</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> PORT </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">4444</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">main</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> args</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;">  </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">    </span><span style="color:#90A4AE;font-style:italic;">// Establece el puerto en el que escucha peticiones</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">ServerSocket</span><span style="color:#90A4AE;"> socketServidor </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        socketServidor </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ServerSocket</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">PORT</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">IOException</span><span style="color:#90A4AE;"> e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">No puede escuchar en el puerto: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> PORT</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">exit</span><span style="color:#39ADB5;">(-</span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">Socket</span><span style="color:#90A4AE;"> socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Escuchando: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> socketServidor</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        </span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(true)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Se bloquea hasta que recibe alguna petici\xF3n de un cliente</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// abriendo un socket para el cliente</span></span>
<span class="line"><span style="color:#90A4AE;">            socketCliente </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> socketServidor</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">accept</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Conexi\xF3n aceptada: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> socketCliente</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Para seguir aceptando peticiones de otros clientes</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// se crea un nuevo hilo que se encargar\xE1 de la comunicaci\xF3n con el cliente</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">Worker</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">).</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">                        </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">...</span></span>
<span class="line"><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;">    </span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Y esta ser\xEDa una implementaci\xF3n est\xE1ndar de un worker</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Worker</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">extends</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Thread</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">Socket</span><span style="color:#90A4AE;"> socketCliente</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> entrada </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">PrintWriter</span><span style="color:#90A4AE;"> salida </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">....</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">@</span><span style="color:#9C3EDA;">Override</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Establece canal de entrada</span></span>
<span class="line"><span style="color:#90A4AE;">            entrada </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">()));</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Establece canal de salida</span></span>
<span class="line"><span style="color:#90A4AE;">            salida </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">PrintWriter</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedWriter</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">OutputStreamWriter</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">socketCliente</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getOutputStream</span><span style="color:#39ADB5;">())),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">true);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Realizamos la comunicaci\xF3n entre servidor y cliente</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// **** ES LO QUE CAMBIA EN CADA EJERCICIO ****</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Hacemos una recepci\xF3n de informaci\xF3n desde el cliente</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> mensajeRecibido </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> entrada</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">&lt;-- Cliente: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> mensajeRecibido</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            </span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Hacemos un env\xEDo al cliente</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> mensajeEnviado </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Mensaje enviado desde el servidor al cliente</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">            salida</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">mensajeEnviado</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">--&gt; Cliente: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> mensajeEnviado</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">....</span></span>
<span class="line"><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;">        </span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><br><br><div class="highlight-line">\xA0</div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Quedando ahora la secuencia de acciones entre el cliente y el servidor de la siguiente manera</p><p><img src="`+v+'" alt="Estados de un servidor monohilo"></p><div class="pagebreak"></div><div class="custom-container info"><p class="custom-container-title">Ejecuci\xF3n de m\xFAltiples clientes desde l\xEDnea de comandos</p><p>Para poder lanzar varias aplicaciones java a la vez, la forma m\xE1s correcta de hacerlo es desde una terminal de comandos. Esto nos permite poder pasarle argumentos a todas las clases, no s\xF3lo a la que est\xE1 marcada como <em>principal</em> en el proyecto.</p><p>Aqu\xED tenemos dos posibilidades, <strong>ejecutar las clases individualmente</strong>, tal y como hacemos desde el IDE o bien <strong>lanzar las clases desde un archivo JAR</strong>.</p><p>En ambos casos, necesitamos haber compilado y construido el proyecto (<em>F11 \xF3 Shift+F11 en Netbeans</em>).</p><p>Ejecuci\xF3n de clases individuales</p><ul><li><p>Lo primero, tal y como se ha indicado anteriormente, debemos tener las clases compiladas.</p></li><li><p>A continuaci\xF3n, al igual que hac\xEDamos con los procesos, debemos ubicarnos en la carpeta <code>build/classes</code> del proyecto.</p></li><li><p>Desde ah\xED, ejecutaremos</p><blockquote><p>build/classes$ java psp.actividades.U4AX_ClaseServidor 5566</p></blockquote><p>los valores que ponemos a continuaci\xF3n del nombre de la clase son los par\xE1metros que la clase recibir\xE1 en el args[] de su m\xE9todo main.</p><p>y para la clase o clases que no sean las principales</p><blockquote><p>build/classes$ java psp.actividades.U4AX_ClaseSCliente localhost 5566</p></blockquote><p>Si queremos lanzar m\xE1s de un cliente, repetiremos el comando desde otra ventana de comandos.</p></li></ul><p>Lanzar las clases desde un archivo JAR</p><ul><li><p>Lo primero, tal y como se ha indicado anteriormente, debemos tener el proyecto construido</p></li><li><p>A continuaci\xF3n, y a diferencia del caso anterior, debemos ubicarnos en el directorio donde est\xE9 el archivo JAR. Si no lo hemos movido, estar\xE1 en la carpeta <code>dist</code> del proyecto.</p></li><li><p>Desde ah\xED, ejecutaremos, <strong>para la clase principal del proyecto</strong></p><blockquote><p>dist$ java -jar U4AX_ProyectoClienteServidor.jar 5566</p></blockquote><blockquote><p>dist$ java -cp U4AX_ProyectoClienteServidor.jar psp.actividades.U4AX_ClaseServidor 5566</p></blockquote><p>los valores que ponemos a continuaci\xF3n del nombre de la clase son los par\xE1metros que la clase recibir\xE1 en el args[] de su m\xE9todo main.</p><p>y para la clase o clases que no sean las principales</p><blockquote><p>dist$ java -cp U4AX_ProyectoClienteServidor.jar psp.actividades.U4AX_ClaseCliente localhost 5566</p></blockquote><p>Si queremos lanzar m\xE1s de un cliente, repetiremos el comando desde otra ventana de comandos.</p></li></ul></div>',25);function Bs(Ds,Es){const r=p("DownloadPDF-component"),c=p("DocumentCover-component"),e=p("router-link"),l=p("ExternalLinkIcon");return B(),D("div",null,[a(r),a(c,{titulo:"4.3 TCP Sockets"}),b,s("nav",h,[s("ul",null,[s("li",null,[a(e,{to:"#_4-3-1-comunicacion-cliente-servidor-con-sockets-tcp"},{default:o(()=>[g]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#programacion-de-aplicaciones-cliente-y-o-servidor"},{default:o(()=>[f]),_:1})])])]),s("li",null,[a(e,{to:"#_4-3-2-cliente-tcp"},{default:o(()=>[_]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#streams-para-e-s-en-los-sockets"},{default:o(()=>[S]),_:1})])])]),s("li",null,[a(e,{to:"#_4-3-3-servidor-tcp"},{default:o(()=>[q]),_:1})]),s("li",null,[a(e,{to:"#_4-3-4-servidor-multihilo"},{default:o(()=>[k]),_:1})])])]),C,w,s("p",null,[s("a",x,[j,a(l)])]),O,s("div",I,[P,F,T,s("ul",null,[s("li",null,[s("a",R,[L,a(l)]),W,s("a",z,[N,a(l)]),U]),s("li",null,[s("a",X,[M,a(l)]),H]),s("li",null,[s("a",J,[V,a(l)]),$])]),Q]),G,s("div",Y,[K,Z,ss,ns,s("p",null,[as,s("a",ls,[es,a(l)]),os]),ps,ts,rs,s("p",null,[cs,s("a",is,[As,a(l)])])]),ds,s("p",null,[ys,s("a",us,[vs,a(l)])]),ms])}const gs=m(E,[["render",Bs],["__file","sockets-tcp.html.vue"]]);export{gs as default};
