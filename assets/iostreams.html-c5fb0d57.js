import{_ as i,a as A}from"./Java_Stream_Readers_BufferedReaders-a3f2ee86.js";import{_ as y,r as o,o as d,c as u,d as a,a as s,w as l,b as n,e as B,f as p}from"./app-59a2b8c9.js";const m={},D=s("h1",{id:"_2-3-handling-process-streams",tabindex:"-1"},"2.3 Handling Process Streams",-1),h={class:"table-of-contents"},v=s("h2",{id:"_2-3-1-redirecting-standard-input-and-output",tabindex:"-1"},"2.3.1 Redirecting Standard Input and Output",-1),E=s("p",null,"By default, the created subprocess does not have its terminal or console. All its standard I/O (i.e., stdin, stdout, stderr) operations will be sent to the parent process. Thereby the parent process can use these streams to feed input to and get output from the subprocess.",-1),b=s("p",null,"Consequently, this gives us a huge amount of flexibility as it gives us control over the input/output of our sub-process.",-1),g=s("p",null,"In a parent-child process relationship I/O streams are also redirected from child process to parent, using 3 pipes, one per each standard stream. Those pipes can be used like in a Linux system.",-1),f=p('<p><img src="'+i+`" alt="alt_text"></p><h3 id="getinputstream" tabindex="-1">getInputStream()</h3><p>We can fetch the output generated by a subprocess and consume within the parent process thus allowing share information between the processes</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> p </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> pbuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> processOutput </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">;</span><span style="color:#90A4AE;">    </span></span>
<span class="line"><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">((</span><span style="color:#90A4AE;">linea </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> processOutput</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">())</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">!=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">    System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">&gt; </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">);</span><span style="color:#90A4AE;">        </span></span>
<span class="line"><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;">            </span></span>
<span class="line"><span style="color:#90A4AE;">processOutput</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span><span style="color:#90A4AE;">    </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+A+`" alt="alt_text"></p><div class="custom-container warning"><p class="custom-container-title">Charset and encodings</p><p>From the time being computer science started we&#39;ve been in trouble with encodings and charsets. And windows console is not an exception.</p><p>Terminal in Windows was also known as &quot;DOS prompt&quot;: so a way to run DOS programs in Windows, so they keep the code page of DOS. Microsoft dislikes non-backward compatible changes, so your DOS program should works also on Windows terminal without problem.</p><p>Wikipedia indicates that <strong>CP850</strong> has theoretically been &quot;largely replaced&quot; by <strong>Windows-1252</strong> and, later, Unicode, but yet it&#39;s here, right in the OS&#39;s terminal.</p><p>Then, if we want to print information from the console in our applications we must deal with the right charset and encoding, that is, CP-850.</p><p>Fortunately, InputStreamReader has a constructor to manage streams with any encoding, so we must use it when working with console commands or applications.</p><div class="language-java" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">(),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">CP850</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span></code></pre></div><blockquote><p>We can force Netbeans to use a UTF-8 as default encoding. To do so we must modify its config file <code>C:/Program Files/Netbeans-xx.x/netbeans/etc/netbeans.conf</code>, changing directive <code>netbeans_default_option</code> and adding <strong>-J-Dfile.encoding=UTF-8</strong> to the end.</p></blockquote></div><h3 id="geterrorstream" tabindex="-1">getErrorStream()</h3><p>Interestingly we can also fetch the errors generated from the subprocess and thereon perform some processing.</p><p>if error output has been redirected by calling method <code>ProcessBuilder.redirectErrorStream(true)</code> then, the error stream and the output stream will be shown using the same stream.</p><p>If we want to have it differentiated from the output, then we can use asimilar schema than before</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> p </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> pbuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> processError </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getErrorStream</span><span style="color:#39ADB5;">()));</span></span>
<span class="line"><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> value </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Integer</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">parseInt</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">processError</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">processError</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),w={class:"custom-container info"},_=s("p",{class:"custom-container-title"},"Decorator or Wrapper design pattern",-1),F=s("p",null,[n("In both input and error streams we are getting information from a BufferedReader. Although we are not aware of using a design pattern, we are using the *"),s("em",null,'decorator design pattern"'),n(" or the so called "),s("strong",null,"wrapper"),n(".")],-1),q=s("blockquote",null,[s("p",null,"Decorator is a structural design pattern that lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the required behaviors.")],-1),x={href:"https://refactoring.guru/design-patterns/java",target:"_blank",rel:"noopener noreferrer"},S=p(`<p>Let&#39;s look at a complete example code using all the above operations</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#F76D47;">import</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">java</span><span style="color:#39ADB5;">.</span><span style="color:#9C3EDA;">io</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">*</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Ejercicio2</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">main</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">args</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> comando </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">notepad</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">ProcessBuilder</span><span style="color:#90A4AE;"> pbuilder </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ProcessBuilder</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">comando</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> p </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null;</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">try</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            p </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> pbuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// 1- Procedemos a leer lo que devuelve el proceso hijo</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#9C3EDA;">InputStream</span><span style="color:#90A4AE;"> is </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// 2- Lo convertimos en un InputStreamReader</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// De esta forma podemos leer caracteres en vez de bytes</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// El InputStreamReader nos permite gestionar diferentes codificaciones</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#9C3EDA;">InputStreamReader</span><span style="color:#90A4AE;"> isr </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">is</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// 2- Para mejorar el rendimiento hacemos un wrapper sobre un BufferedReader</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// De esta forma podemos leer enteros, cadenas o incluso líneas.</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> br </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">isr</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// A Continuación leemos todo como una cadena, línea a línea</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">;</span></span>
<span class="line"><span style="color:#90A4AE;">            </span><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">((</span><span style="color:#90A4AE;">linea </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> br</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">())</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">!=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null)</span><span style="color:#90A4AE;"> </span></span>
<span class="line"><span style="color:#90A4AE;">                System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">linea</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">catch</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">Exception</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">e</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Error en: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;">comando</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">            e</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">printStackTrace</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">finally</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>
<span class="line"><span style="color:#39ADB5;">            </span><span style="color:#90A4AE;font-style:italic;">// Para finalizar, cerramos los recursos abiertos</span></span>
<span class="line"><span style="color:#90A4AE;">            br</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">            isr</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">            is</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;">    </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>
<span class="line"><span style="color:#39ADB5;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getoutputstream" tabindex="-1">getOutputStream()</h3><p>We can even send input to a subprocess from a parent process</p><p>There are three different ways of sending information to a child process. The first one is based on an OutputStream. Here no wrapper is used and the programmer has to manage all elements of the stream flow. From newline characters and type conversions to force sending information over the stream.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">// Low-level objects. We have to manage all elements of communication</span></span>
<span class="line"><span style="color:#9C3EDA;">OutputStream</span><span style="color:#90A4AE;"> toProcess </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getOutputStream</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#90A4AE;">toProcess</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">write</span><span style="color:#39ADB5;">((</span><span style="color:#90A4AE;">String</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">valueOf</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">number1</span><span style="color:#39ADB5;">)).</span><span style="color:#6182B8;">getBytes</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">UTF-8</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">));</span></span>
<span class="line"><span style="color:#90A4AE;">toProcess</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">write</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;">\\n</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getBytes</span><span style="color:#39ADB5;">());</span></span>
<span class="line"><span style="color:#90A4AE;">toProcess</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">flush</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The next one is based on a Writer object as a wrapper for the OutputStream, where communication management is easier, but the programmer still has to manage elements as new lines.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">Writer</span><span style="color:#90A4AE;"> w </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">OutputStreamWriter</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getOutputStream</span><span style="color:#39ADB5;">(),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">UTF-8</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">w</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">write</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">send to child</span><span style="color:#90A4AE;">\\n</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, the top-level wrapper for using the OutputStream is the PrintWriter object, where we can use the wrapper with the same methods as the System.out to handle child communication flow.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">PrintWriter</span><span style="color:#90A4AE;"> toProcess </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">PrintWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">OutputStreamWriter</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">            p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getOutputStream</span><span style="color:#39ADB5;">(),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">UTF-8</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">)),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">true);</span></span>
<span class="line"><span style="color:#90A4AE;">toProcess</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">sent to child</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inheriting-the-i-o-of-the-parent-process" tabindex="-1">Inheriting the I/O of the parent process</h3><p>With the inheritIO() method We can redirect the sub-process I/O to the standard I/O of the current process (parent process)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">ProcessBuilder</span><span style="color:#90A4AE;"> processBuilder </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ProcessBuilder</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">/bin/sh</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">-c</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">echo hello</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">inheritIO</span><span style="color:#39ADB5;">();</span></span>
<span class="line"><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> process </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> exitCode </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> process</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">waitFor</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example, by using the inheritIO() method we see the output of a simple command in the console in our IDE.</p><h3 id="pipelines" tabindex="-1">Pipelines</h3><p>Java 9 introduced the concept of pipelines to the ProcessBuilder API:</p><div class="language-java" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">List</span><span style="color:#39ADB5;">&lt;</span><span style="color:#90A4AE;">Process</span><span style="color:#39ADB5;">&gt;</span><span style="color:#90A4AE;"> startPipeline​</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">List</span><span style="color:#39ADB5;">&lt;</span><span style="color:#90A4AE;">ProcessBuilder</span><span style="color:#39ADB5;">&gt;</span><span style="color:#90A4AE;"> builders</span><span style="color:#39ADB5;">)</span></span>
<span class="line"></span></code></pre></div><p>Using the startPipeline method we can pass a list of ProcessBuilder objects. This static method will then start a Process for each ProcessBuilder. Thus, creating a pipeline of processes which are linked by their standard output and standard input streams.</p><p>For example, if we want to run something like this:</p><blockquote><p>find . -name *.java -type f | wc -l</p></blockquote><p>What we&#39;d do is create a process builder for each isolated command and compose them into a pipeline</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">List</span><span style="color:#90A4AE;"> builders </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Arrays</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">asList</span><span style="color:#39ADB5;">(</span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ProcessBuilder</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">find</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">src</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">-name</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">*.java</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">-type</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">f</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">),</span><span style="color:#90A4AE;"> </span></span>
<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ProcessBuilder</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">wc</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">-l</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9C3EDA;">List</span><span style="color:#90A4AE;"> processes </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> ProcessBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">startPipeline</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">builders</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> last </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> processes</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">get</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">processes</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">size</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">-</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;font-style:italic;">// We can get lats process output to get the final results</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example, we&#39;re searching for all the java files inside the src directory and piping the results into another process to count them.</p><h2 id="_2-3-2-redirecting-standard-input-and-output" tabindex="-1">2.3.2 Redirecting Standard Input and Output</h2><p>In the real world, we will probably want to capture the results of our running processes inside a log file for further analysis. Luckily the ProcessBuilder API has built-in support for exactly this.</p><p>By default, our process reads input from a pipe. We can access this pipe via the output stream returned by Process.getOutputStream().</p><p>However, as we&#39;ll see shortly, the standard output may be redirected to another source such as a file using the method <code>redirectOutput(File)</code>. In this case, getOutputStream() will return a ProcessBuilder.NullOutputStream.</p><p>Let&#39;s prepare an example to print out the version of Java. But this time let&#39;s redirect the output to a log file instead of the standard output pipe:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">ProcessBuilder</span><span style="color:#90A4AE;"> processBuilder </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ProcessBuilder</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">java</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">-version</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#90A4AE;">processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">redirectErrorStream</span><span style="color:#39ADB5;">(true);</span></span>
<span class="line"><span style="color:#9C3EDA;">File</span><span style="color:#90A4AE;"> log </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> folder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">newFile</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">java-version.log</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">redirectOutput</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">log</span><span style="color:#39ADB5;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> process </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example, we create a new temporary file called log and tell our ProcessBuilder to redirect output to this file destination.</p><p>Now let&#39;s take a look at a slight variation on this example. For instance when we wish to <code>append to</code> a log file rather than create a new one each time:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="shiki material-theme-lighter" style="background-color:#FAFAFA;" tabindex="0"><code><span class="line"><span style="color:#9C3EDA;">File</span><span style="color:#90A4AE;"> log </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> tempFolder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">newFile</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">java-version-append.log</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>
<span class="line"><span style="color:#90A4AE;">processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">redirectErrorStream</span><span style="color:#39ADB5;">(true);</span></span>
<span class="line"><span style="color:#90A4AE;">processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">redirectOutput</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">Redirect</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">appendTo</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">log</span><span style="color:#39ADB5;">));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s also important to mention the call to <code>redirectErrorStream(true)</code>. In case of any errors, the error output will be merged into the normal process output file.</p><p>We can also redirect error stream an input stream for the subprocess with methods</p><ul><li>redirectError(File)</li><li>redirectInput(File)</li></ul><p>To make the redirections we can use the <code>ProcessBuilder.Redirect</code> class as a parameter for the previous methods, using one of the following values</p><table><thead><tr><th>Valor</th><th>Significado</th></tr></thead><tbody><tr><td>Redirect.DISCARD</td><td>Information is discarded</td></tr><tr><td>Redirect.to(File)</td><td>Information is saved in the file. If it exists, it&#39;s emptied.</td></tr><tr><td>Redirect.from(File)</td><td>Information is read from the file</td></tr><tr><td>Redirect.appendTo(File)</td><td>Information is saved in the file. If it exists, it&#39;s not emptied.</td></tr></tbody></table>`,37);function I(P,C){const t=o("DownloadPDF-component"),r=o("DocumentCover-component"),e=o("router-link"),c=o("ExternalLinkIcon");return d(),u("div",null,[a(t),a(r,{titulo:"2.3 Handling Process Streams"}),D,s("nav",h,[s("ul",null,[s("li",null,[a(e,{to:"#_2-3-1-redirecting-standard-input-and-output"},{default:l(()=>[n("2.3.1 Redirecting Standard Input and Output")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#getinputstream"},{default:l(()=>[n("getInputStream()")]),_:1})]),s("li",null,[a(e,{to:"#geterrorstream"},{default:l(()=>[n("getErrorStream()")]),_:1})]),s("li",null,[a(e,{to:"#getoutputstream"},{default:l(()=>[n("getOutputStream()")]),_:1})]),s("li",null,[a(e,{to:"#inheriting-the-i-o-of-the-parent-process"},{default:l(()=>[n("Inheriting the I/O of the parent process")]),_:1})]),s("li",null,[a(e,{to:"#pipelines"},{default:l(()=>[n("Pipelines")]),_:1})])])]),s("li",null,[a(e,{to:"#_2-3-2-redirecting-standard-input-and-output"},{default:l(()=>[n("2.3.2 Redirecting Standard Input and Output")]),_:1})])])]),v,E,b,g,B("![alt_text](./../../media/unit2/pipe_with_two.jpg)"),f,s("div",w,[_,F,q,s("p",null,[s("a",x,[n("Refactoring.Guru design patterns"),a(c)])])]),S])}const O=y(m,[["render",I],["__file","iostreams.html.vue"]]);export{O as default};
