"use strict";(self.webpackChunkapuntes_psp=self.webpackChunkapuntes_psp||[]).push([[314],{8303:(s,e,n)=>{n.r(e),n.d(e,{data:()=>a});const a={key:"v-348bab3f",path:"/en/unit2/processbuilder.html",title:"2.2 Process management in Java with ProcessBuilder",lang:"en-US",frontmatter:{title:"2.2 Process management in Java with ProcessBuilder"},excerpt:"",headers:[{level:2,title:"2.2.1 Preparation and setting of a process",slug:"_2-2-1-preparation-and-setting-of-a-process",children:[]},{level:2,title:"2.2.2 Process access while running",slug:"_2-2-2-process-access-while-running",children:[]}],filePathRelative:"en/unit2/processbuilder.md",git:{updatedTime:null,contributors:[]}}},5478:(s,e,n)=>{n.r(e),n.d(e,{default:()=>m});var a=n(6252);const t=(0,a._)("h1",{id:"_2-2-process-management-in-java-with-processbuilder",tabindex:"-1"},"2.2 Process management in Java with ProcessBuilder",-1),l={class:"table-of-contents"},o=(0,a.Uk)("2.2.1 Preparation and setting of a process"),p=(0,a.Uk)("2.2.2 Process access while running"),r=(0,a._)("h2",{id:"_2-2-1-preparation-and-setting-of-a-process",tabindex:"-1"},"2.2.1 Preparation and setting of a process",-1),c=(0,a._)("p",null,[(0,a.Uk)("The class to set the running attributes for a new process, before it is being run, is the "),(0,a._)("code",null,"ProcessBuilder"),(0,a.Uk)(" class.")],-1),i={href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ProcessBuilder.html",target:"_blank",rel:"noopener noreferrer"},d=(0,a.Uk)("Specification java.lang.ProcessBuilder"),y=(0,a.uE)('<p>This is an auxiliary class for the Process and is instantiated to manage a collection of process attributes. We can invoke the <code>start</code> method to create a new process with the attributes defined by the instance of the ProcessBuilder class.</p><p>Repeated calls to the start method would create a new process with the same attributes.</p><p>The ProcessBuilder class defines two constructors, such as:</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#6182B8;">ProcessBuilder</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">List</span><span style="color:#39ADB5;">&lt;</span><span style="color:#90A4AE;">String</span><span style="color:#39ADB5;">&gt;</span><span style="color:#90A4AE;"> command</span><span style="color:#39ADB5;">)</span></span>\n<span class="line"><span style="color:#6182B8;">ProcessBuilder</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">...</span><span style="color:#90A4AE;"> command</span><span style="color:#39ADB5;">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>The meaning implied by the parameters passed to both constructors is same. In the first constructor, the command to be executed, along with command line arguments, is passed in a list of strings. And, in the second constructor, the command and the command line arguments are specified through the varargs parameter. We can use either of the constructors, depending upon the way to pass the parameter.</p><div class="custom-container info"><p class="custom-container-title">Setting the process at runtime</p><p>If we want to set the process to be run at runtime, or at the time the ProcessBuilder instance is created we still don&#39;t know the command, it can be set later by using the command(String).</p><p>The same way as the constructors, we have two versions of command method</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#6182B8;">command</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">List</span><span style="color:#39ADB5;">&lt;</span><span style="color:#90A4AE;">String</span><span style="color:#39ADB5;">&gt;</span><span style="color:#90A4AE;"> command</span><span style="color:#39ADB5;">)</span></span>\n<span class="line"><span style="color:#6182B8;">command</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">...</span><span style="color:#90A4AE;"> command</span><span style="color:#39ADB5;">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>and there&#39;s also another command method, without parameters to get the command and it&#39;s parameters already set for the ProcessBuilder instance.</p></div><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#90A4AE;font-style:italic;">// Sets the process after the ProcessBuilder object is created</span></span>\n<span class="line"><span style="color:#9C3EDA;">ProcessBuilder</span><span style="color:#90A4AE;"> builder </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ProcessBuilder</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"><span style="color:#39ADB5;font-style:italic;">if</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">isWindows</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>\n<span class="line"><span style="color:#90A4AE;">    builder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">command</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">cmd.exe</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">/c</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">dir</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">else</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>\n<span class="line"><span style="color:#90A4AE;">    builder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">command</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">sh</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">-c</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">ls</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"><span style="color:#39ADB5;">}</span></span>\n<span class="line"><span style="color:#90A4AE;font-style:italic;">// Changes working directory for the running process</span></span>\n<span class="line"><span style="color:#90A4AE;">builder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">directory</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">File</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">System</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getProperty</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">user.home</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">)));</span></span>\n<span class="line"><span style="color:#90A4AE;font-style:italic;">// Starts the process</span></span>\n<span class="line"><span style="color:#90A4AE;">builder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Some of the settings that can be changed for a process are:</p><ul><li>change the working directory our shell command is running in using builder.directory()</li><li>set-up a custom key-value map as environment using builder.environment()</li><li>redirect input and output streams to custom replacements</li><li>inherit both of them to the streams of the current JVM process using builder.inheritIO()</li></ul><div class="pagebreak"></div><h2 id="_2-2-2-process-access-while-running" tabindex="-1">2.2.2 Process access while running</h2><p>The <code>Process</code> is an abstract class defined in the java.lang package that encapsulates the runtime information of a program in execution. The <code>start</code> method invoked by the ProcessBuilder class returns a reference to this class instance. There is an another way to create an instance of this class, through the <code>exec</code> method of the Runtime instance.</p><p>The methods defined by the Process class can be used to perform input/output operations from the process, check the exit status of the process, wait for it to complete, and terminate the process. These methods, however, are not built to work on special processes of the native platform like daemon processes, shell scripts, and so on.</p>',13),A={href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Process.html",target:"_blank",rel:"noopener noreferrer"},u=(0,a.Uk)("Specification java.lang.Process"),h=(0,a.uE)('<p>Intriguingly, the process created by the start() method does not own a console. Instead, it redirects (stdin, stdout, stderr) to the parent process. If need be, we can access them via streams obtained using methods defined in the class, such as getInputStream(), getOutputStream() and getErrorSteam(). These are the ways we can feed input to and get results from the sub processes.</p><p>Some of the common methods defined in this class are:</p><table><thead><tr><th style="text-align:left;">method</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">int exitValue()</td><td style="text-align:left;">Exits code returned from the process executed</td></tr><tr><td style="text-align:left;">Boolean isAlive()</td><td style="text-align:left;">Checks to see if the invoking process is still running.</td></tr><tr><td style="text-align:left;">int waitFor()</td><td style="text-align:left;">Waits for the invoking process to end. The integer value returned by the method is the exit code by the process.</td></tr><tr><td style="text-align:left;">Boolean waitFor(long timeOut, TimeUnit unit)</td><td style="text-align:left;">Overloaded method of previous one. We can specify the wait time. This method returns true if the process has terminated and false if timeout has occurred.</td></tr><tr><td style="text-align:left;">void destroy()</td><td style="text-align:left;">These two methods are used to kill or terminate the process. One, the second, just does it forcibly.</td></tr><tr><td style="text-align:left;">Process destroyForcibly()</td><td style="text-align:left;"></td></tr></tbody></table><p>Let’s write a simple Java program to open an application as a separate process. After it is opened, the | program would wait for, say, 10 seconds and then destroy the process, which will immediately close the | application.</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">ProcessDemo</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#90A4AE;">   </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">main</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> args</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">throws</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">Exception</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#90A4AE;">      </span><span style="color:#9C3EDA;">ProcessBuilder</span><span style="color:#90A4AE;"> pb </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ProcessBuilder</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">firefox</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"><span style="color:#90A4AE;">      </span><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> p </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> pb</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"><span style="color:#90A4AE;">      </span><span style="color:#9C3EDA;">boolean</span><span style="color:#90A4AE;"> alive </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">isAlive</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"><span style="color:#90A4AE;">      p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">waitFor</span><span style="color:#39ADB5;">(</span><span style="color:#F76D47;">10</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> TimeUnit</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">SECONDS</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"><span style="color:#90A4AE;">      p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">destroy</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"><span style="color:#90A4AE;">      </span><span style="color:#9C3EDA;">boolean</span><span style="color:#90A4AE;"> alive </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">isAlive</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"><span style="color:#90A4AE;">   </span><span style="color:#39ADB5;">}</span></span>\n<span class="line"><span style="color:#39ADB5;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="custom-container danger"><p class="custom-container-title">Exceptions management</p><p>Call to method <strong>waitFor</strong> implies that the parent process gets locked until child process ends, or until a signal from the system (Exception) is received.</p><p>It&#39;s better to handle exceptions than to throw them to upper levels.</p></div>',6),m={render:function(s,e){const n=(0,a.up)("RouterLink"),m=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[t,(0,a._)("nav",l,[(0,a._)("ul",null,[(0,a._)("li",null,[(0,a.Wm)(n,{to:"#_2-2-1-preparation-and-setting-of-a-process"},{default:(0,a.w5)((()=>[o])),_:1})]),(0,a._)("li",null,[(0,a.Wm)(n,{to:"#_2-2-2-process-access-while-running"},{default:(0,a.w5)((()=>[p])),_:1})])])]),r,c,(0,a._)("blockquote",null,[(0,a._)("p",null,[(0,a._)("a",i,[d,(0,a.Wm)(m)])])]),y,(0,a._)("blockquote",null,[(0,a._)("p",null,[(0,a._)("a",A,[u,(0,a.Wm)(m)])])]),h],64)}}}}]);