"use strict";(self.webpackChunkapuntes_psp=self.webpackChunkapuntes_psp||[]).push([[3991],{6900:(e,n,o)=>{o.r(n),o.d(n,{data:()=>t});const t={key:"v-b73e4fe4",path:"/en/unit2/",title:"2 Introduction",lang:"en-US",frontmatter:{title:"2 Introduction"},excerpt:"",headers:[{level:2,title:"Goals",slug:"goals",children:[]}],filePathRelative:"en/unit2/index.md",git:{updatedTime:1632391777e3,contributors:[{name:"Vicente MartÃ­nez",email:"vicente@iesdoctorbalmis.com",commits:2}]}}},4502:(e,n,o)=>{o.r(n),o.d(n,{default:()=>a});const t=(0,o(6252).uE)('<h1 id="unit-2-process-programming" tabindex="-1">Unit 2. Process programming</h1><p>Once we know about key concepts in concurrency, we can also differentiate programs and processes. In this second unit we will learn how we can launch a program from our own code, that is, how to create a process from a running process.</p><p>In addition to launch programs and create new processes, there&#39;s a relationship between the parent process and its children that allow them to communicate exchanging information. This is the way our programs will be able to launch other applications, os command or even applications developed by us. Furthermore, parent-child processes allow synchronization and communication among them.</p><h2 id="goals" tabindex="-1">Goals</h2><p>The goals for this unit are:</p><ul><li>To know Java classes for process management</li><li>To monitor and control process lifecycle</li><li>To control parent-child communications</li><li>To use synchronization methods for processes and sub-processes</li><li>To learn how pipes communications works</li><li>To learn curl syntax and use it for API REST testing purposes</li><li>To create applications that run parallel tasks</li></ul>',6),a={render:function(e,n){return t}}}}]);