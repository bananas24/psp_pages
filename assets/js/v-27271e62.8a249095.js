"use strict";(self.webpackChunkapuntes_psp=self.webpackChunkapuntes_psp||[]).push([[677],{9023:(s,n,a)=>{a.r(n),a.d(n,{data:()=>l});const l={key:"v-27271e62",path:"/en/unit3/runnable.html",title:"3.1 Java classes for threads",lang:"en-US",frontmatter:{title:"3.1 Java classes for threads"},excerpt:"",headers:[{level:2,title:"2.1.1. Runnable Interface",slug:"_2-1-1-runnable-interface",children:[{level:3,title:"Java Class Implements Runnable",slug:"java-class-implements-runnable",children:[]},{level:3,title:"Anonymous Implementation of Runnable",slug:"anonymous-implementation-of-runnable",children:[]},{level:3,title:"Java Lambda Implementation of Runnable",slug:"java-lambda-implementation-of-runnable",children:[]},{level:3,title:"Calling the run method on a Runnable class",slug:"calling-the-run-method-on-a-runnable-class",children:[]}]},{level:2,title:"2.1.2 Thread subclass",slug:"_2-1-2-thread-subclass",children:[]},{level:2,title:"2.1.3 Starting a Thread With a Runnable",slug:"_2-1-3-starting-a-thread-with-a-runnable",children:[{level:3,title:"Subclass or Runnable?",slug:"subclass-or-runnable",children:[]}]}],filePathRelative:"en/unit3/runnable.md",git:{updatedTime:null,contributors:[]}}},5754:(s,n,a)=>{a.r(n),a.d(n,{default:()=>R});var l=a(6252);const e=(0,l._)("h1",{id:"_3-1-java-classes-for-threads",tabindex:"-1"},"3.1. Java classes for threads",-1),o={class:"table-of-contents"},p=(0,l.Uk)("2.1.1. Runnable Interface"),t=(0,l.Uk)("Java Class Implements Runnable"),r=(0,l.Uk)("Anonymous Implementation of Runnable"),c=(0,l.Uk)("Java Lambda Implementation of Runnable"),i=(0,l.Uk)("Calling the run method on a Runnable class"),A=(0,l.Uk)("2.1.2 Thread subclass"),y=(0,l.Uk)("2.1.3 Starting a Thread With a Runnable"),u=(0,l.Uk)("Subclass or Runnable?"),b=(0,l._)("h2",{id:"_2-1-1-runnable-interface",tabindex:"-1"},"2.1.1. Runnable Interface",-1),d=(0,l._)("p",null,"A Java Thread can execute your Java code inside your Java application.",-1),h=(0,l._)("p",null,"When a Java application is started its main() method is executed by the main thread - a special thread that is created by the Java VM to run your application. From inside your application you can create and start more threads which can execute parts of your application code in parallel with the main thread.",-1),m=(0,l._)("p",null,"Java threads are objects like any other Java objects. Threads are instances of class java.lang.Thread, or instances of subclasses of this class. In addition to being objects, java threads can also execute code.",-1),E=(0,l._)("p",null,[(0,l.Uk)("The first way to specify what code a thread should run is by creating a class that implements the "),(0,l._)("code",null,"java.lang.Runnable"),(0,l.Uk)(" interface.")],-1),D=(0,l._)("p",null,"The Runnable interface is a standard Java Interface that comes with the Java platform. The Runnable interface only has a single method run().",-1),_={href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Runnable.html",target:"_blank",rel:"noopener noreferrer"},B=(0,l.Uk)("java.lang.Runnable specification"),f=(0,l.uE)('<p>Whatever the thread is supposed to do when it executes must be included in the implementation of the run() method. There are three ways to implement the Runnable interface:</p><ul><li>Create a Java class that implements the Runnable interface.</li><li>Create an anonymous class that implements the Runnable interface.</li><li>Create a Java Lambda that implements the Runnable interface.</li></ul><p>All three options are explained in the following sections.</p><h3 id="java-class-implements-runnable" tabindex="-1">Java Class Implements Runnable</h3><p>The first way to implement the Java Runnable interface is by creating your own Java class that implements the Runnable interface. Here is an example of a custom Java class that implements the Runnable interface:</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">MyRunnable</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">implements</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Runnable</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">(){</span></span>\n<span class="line"><span style="color:#90A4AE;">      System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">MyRunnable running</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#39ADB5;">}</span></span>\n<span class="line"><span style="color:#39ADB5;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>All this Runnable implementation does is to print out the text MyRunnable running. After printing that text, the run() method exits, and the thread running the run() method will stop.</p><h3 id="anonymous-implementation-of-runnable" tabindex="-1">Anonymous Implementation of Runnable</h3><p>You can also create an anonymous implementation of Runnable. Here is an example of an anonymous Java class that implements the Runnable interface:</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">Runnable</span><span style="color:#90A4AE;"> myRunnable </span><span style="color:#39ADB5;">=</span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">Runnable</span><span style="color:#39ADB5;">(){</span></span>\n<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">(){</span></span>\n<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Runnable running</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Apart from being an anonymous class, this example is quite similar to the example that used a custom class to implement the Runnable interface.</p><h3 id="java-lambda-implementation-of-runnable" tabindex="-1">Java Lambda Implementation of Runnable</h3><p>The third way to implement the Runnable interface is by creating a Java Lambda implementation of the Runnable interface. This is possible because the Runnable interface only has a single unimplemented method, and is therefore practically (although possibly unintentionally) a functional Java interface.</p><p>Here is an example of a Java lambda expression that implements the Runnable interface:</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">Runnable</span><span style="color:#90A4AE;"> runnable </span><span style="color:#39ADB5;">=</span></span>\n<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">-&gt;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span><span style="color:#90A4AE;"> System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Lambda Runnable running</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">};</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="calling-the-run-method-on-a-runnable-class" tabindex="-1">Calling the run method on a Runnable class</h3><p>Look at this sample code of Runnable implementation</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">LiftOff</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">implements</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Runnable</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> countDown </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">10</span><span style="color:#39ADB5;">;</span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> taskCount </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">0</span><span style="color:#39ADB5;">;</span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">private</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">final</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> id </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> taskCount</span><span style="color:#39ADB5;">;</span></span>\n<span class="line"><span style="color:#90A4AE;">    </span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">LiftOff</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{}</span></span>\n<span class="line"><span style="color:#90A4AE;">    </span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">LiftOff</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> countDown</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>\n<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">this.</span><span style="color:#90A4AE;">countDown </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> countDown</span><span style="color:#39ADB5;">;</span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>\n<span class="line"><span style="color:#90A4AE;">    </span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">@</span><span style="color:#9C3EDA;">Override</span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>\n<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">countDown </span><span style="color:#39ADB5;">&gt;</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">0</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>\n<span class="line"><span style="color:#90A4AE;">            System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">#</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> id </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;"> (</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> countDown </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">)</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">);</span></span>\n<span class="line"><span style="color:#90A4AE;">            countDown</span><span style="color:#39ADB5;">--;</span></span>\n<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#39ADB5;">}</span></span>\n<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">LiftOff (</span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> id </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">)</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span></span>\n<span class="line"><span style="color:#90A4AE;">    </span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">main</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">String</span><span style="color:#39ADB5;">[]</span><span style="color:#90A4AE;"> args</span><span style="color:#39ADB5;">)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>\n<span class="line"><span style="color:#90A4AE;">        </span><span style="color:#9C3EDA;">LiftOff</span><span style="color:#90A4AE;"> launch </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">LiftOff</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"><span style="color:#90A4AE;">        launch</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"><span style="color:#90A4AE;">        System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Waiting for LiftOff!</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;">    </span></span>\n<span class="line"><span style="color:#39ADB5;">}</span></span>\n<span class="line"></span></code></pre><div class="highlight-lines"><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><div class="custom-container question"><p class="custom-container-title">What&#39;s wrong with previous execution</p><p>Is the &quot;Waiting for LiftOff!&quot; placed in the right place?</p><p>Try to create more instances of LiftOff and run them all?</p><p>Is the application doing something different to a single threaded application? What can you notice from the program output?</p></div><h2 id="_2-1-2-thread-subclass" tabindex="-1">2.1.2 Thread subclass</h2><p>The second way to specify what code a thread is to run, is to create a subclass of <code>java.lang.Thread</code> and override the run() method. The run() method is what is executed by the thread after you call <code>start()</code>.</p>',21),v={href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Thread.html",target:"_blank",rel:"noopener noreferrer"},g=(0,l.Uk)("java.lang.Thread specification"),w=(0,l.uE)('<p>Here is an example of creating a Java Thread subclass:</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">class</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">MyThread</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">extends</span><span style="color:#90A4AE;"> </span><span style="color:#E2931D;">Thread</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>\n<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">(){</span></span>\n<span class="line"><span style="color:#90A4AE;">      System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">MyThread running</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#39ADB5;">}</span></span>\n<span class="line"><span style="color:#39ADB5;">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>To create and start the above thread you can do like this:</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">MyThread</span><span style="color:#90A4AE;"> myThread </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">MyThread</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"><span style="color:#90A4AE;">myTread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>The start() call will return as soon as the thread is started. It will not wait until the run() method is done. The run() method will execute as if executed by a different CPU. When the run() method executes it will print out the text &quot;MyThread running&quot;.</p><p>You can also create an anonymous subclass of Thread like this:</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">Thread</span><span style="color:#90A4AE;"> thread </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">Thread</span><span style="color:#39ADB5;">(){</span></span>\n<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">void</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">run</span><span style="color:#39ADB5;">(){</span></span>\n<span class="line"><span style="color:#90A4AE;">    System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Thread Running</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"><span style="color:#90A4AE;">  </span><span style="color:#39ADB5;">}</span></span>\n<span class="line"><span style="color:#39ADB5;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#90A4AE;">thread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>This example will print out the text &quot;Thread running&quot; once the run() method is executed by the new thread.</p><div class="custom-container question"><p class="custom-container-title">LiftOff example</p><p>Copy the original LiftOff example and now make it extends Thread class.</p><p>Is the &quot;Waiting for LiftOff!&quot; placed in the right place? Is it working as it&#39;s supposed to?</p><p>Try to create more instances of LiftOff and run them all is the application doing something different to a single threaded application? What can you notice from the program output?</p></div><h2 id="_2-1-3-starting-a-thread-with-a-runnable" tabindex="-1">2.1.3 Starting a Thread With a Runnable</h2><p>o have the run() method executed by a thread, pass an instance of a class, anonymous class or lambda expression that implements the Runnable interface to a Thread in its constructor. Here is how that is done:</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">Runnable</span><span style="color:#90A4AE;"> runnable </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">MyRunnable</span><span style="color:#39ADB5;">();</span><span style="color:#90A4AE;"> </span><span style="color:#90A4AE;font-style:italic;">// or an anonymous class, or lambda...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9C3EDA;">Thread</span><span style="color:#90A4AE;"> thread </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">Thread</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">runnable</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"><span style="color:#90A4AE;">thread</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>When the thread is started it will call the run() method of the MyRunnable instance (see previous examples) instead of executing it&#39;s own run() method. The above example would print out the text &quot;MyRunnable running&quot;.</p><div class="custom-container info"><p class="custom-container-title">Information</p><p>Hence, there are two ways to specify what code the thread should execute.</p><ul><li>The first is to create a subclass of Thread and override the run() method.</li><li>The second method is to pass an object that implements Runnable to the Thread constructor.</li></ul></div>',14),C=(0,l._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,l._)("pre",{class:"shiki",style:{"background-color":"#FAFAFA"}},[(0,l._)("code",null,[(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#9C3EDA"}},"public"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#9C3EDA"}},"class"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#E2931D"}},"EjemploThread"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#9C3EDA"}},"extends"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#E2931D"}},"Thread"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#39ADB5"}},"{")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"  "),(0,l._)("span",{style:{color:"#9C3EDA"}},"public"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#9C3EDA"}},"void"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#6182B8"}},"run"),(0,l._)("span",{style:{color:"#39ADB5"}},"()"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#39ADB5"}},"{")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#39ADB5"}},"    "),(0,l._)("span",{style:{color:"#90A4AE","font-style":"italic"}},"// Código del hilo")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"  "),(0,l._)("span",{style:{color:"#39ADB5"}},"}")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"}),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"  "),(0,l._)("span",{style:{color:"#9C3EDA"}},"public"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#9C3EDA"}},"static"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#9C3EDA"}},"void"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#6182B8"}},"main"),(0,l._)("span",{style:{color:"#39ADB5"}},"("),(0,l._)("span",{style:{color:"#9C3EDA"}},"String"),(0,l._)("span",{style:{color:"#39ADB5"}},"[]"),(0,l._)("span",{style:{color:"#90A4AE"}}," args"),(0,l._)("span",{style:{color:"#39ADB5"}},")"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#39ADB5"}},"{")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"    "),(0,l._)("span",{style:{color:"#9C3EDA"}},"EjemploThread"),(0,l._)("span",{style:{color:"#90A4AE"}}," hilo "),(0,l._)("span",{style:{color:"#39ADB5"}},"="),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#39ADB5","font-style":"italic"}},"new"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#6182B8"}},"EjemploThread"),(0,l._)("span",{style:{color:"#39ADB5"}},"();")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"    hilo"),(0,l._)("span",{style:{color:"#39ADB5"}},"."),(0,l._)("span",{style:{color:"#6182B8"}},"start"),(0,l._)("span",{style:{color:"#39ADB5"}},"();")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"  "),(0,l._)("span",{style:{color:"#39ADB5"}},"}")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#39ADB5"}},"}")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"})])]),(0,l._)("div",{class:"highlight-lines"},[(0,l._)("div",{class:"highlight-line"}," "),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("div",{class:"highlight-line"}," "),(0,l._)("br"),(0,l._)("br"),(0,l._)("br")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br")])],-1),k=(0,l._)("div",{class:"language-java ext-java line-numbers-mode"},[(0,l._)("pre",{class:"shiki",style:{"background-color":"#FAFAFA"}},[(0,l._)("code",null,[(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#9C3EDA"}},"public"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#9C3EDA"}},"class"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#E2931D"}},"EjemploRunnable"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#9C3EDA"}},"implements"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#E2931D"}},"Runnable"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#39ADB5"}},"{")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"  "),(0,l._)("span",{style:{color:"#9C3EDA"}},"public"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#9C3EDA"}},"void"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#6182B8"}},"run"),(0,l._)("span",{style:{color:"#39ADB5"}},"()"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#39ADB5"}},"{")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#39ADB5"}},"    "),(0,l._)("span",{style:{color:"#90A4AE","font-style":"italic"}},"// Código del hilo")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"  "),(0,l._)("span",{style:{color:"#39ADB5"}},"}")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"}),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"  "),(0,l._)("span",{style:{color:"#9C3EDA"}},"public"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#9C3EDA"}},"static"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#9C3EDA"}},"void"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#6182B8"}},"main"),(0,l._)("span",{style:{color:"#39ADB5"}},"("),(0,l._)("span",{style:{color:"#9C3EDA"}},"String"),(0,l._)("span",{style:{color:"#39ADB5"}},"[]"),(0,l._)("span",{style:{color:"#90A4AE"}}," args"),(0,l._)("span",{style:{color:"#39ADB5"}},")"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#39ADB5"}},"{")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"    "),(0,l._)("span",{style:{color:"#9C3EDA"}},"Thread"),(0,l._)("span",{style:{color:"#90A4AE"}}," hilo "),(0,l._)("span",{style:{color:"#39ADB5"}},"="),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#39ADB5","font-style":"italic"}},"new"),(0,l._)("span",{style:{color:"#90A4AE"}}," "),(0,l._)("span",{style:{color:"#6182B8"}},"Thread"),(0,l._)("span",{style:{color:"#39ADB5"}},"("),(0,l._)("span",{style:{color:"#6182B8"}},"EjemploRunnable"),(0,l._)("span",{style:{color:"#39ADB5"}},"());")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"    hilo"),(0,l._)("span",{style:{color:"#39ADB5"}},"."),(0,l._)("span",{style:{color:"#6182B8"}},"start"),(0,l._)("span",{style:{color:"#39ADB5"}},"();")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#90A4AE"}},"  "),(0,l._)("span",{style:{color:"#39ADB5"}},"}"),(0,l._)("span",{style:{color:"#90A4AE"}},"    ")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"},[(0,l._)("span",{style:{color:"#39ADB5"}},"}")]),(0,l.Uk)("\n"),(0,l._)("span",{class:"line"})])]),(0,l._)("div",{class:"highlight-lines"},[(0,l._)("div",{class:"highlight-line"}," "),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("br"),(0,l._)("div",{class:"highlight-line"}," "),(0,l._)("br"),(0,l._)("br"),(0,l._)("br")]),(0,l._)("div",{class:"line-numbers"},[(0,l._)("span",{class:"line-number"},"1"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"2"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"3"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"4"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"5"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"6"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"7"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"8"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"9"),(0,l._)("br"),(0,l._)("span",{class:"line-number"},"10"),(0,l._)("br")])],-1),T=(0,l.uE)('<h3 id="subclass-or-runnable" tabindex="-1">Subclass or Runnable?</h3><p>There are no rules about which of the two methods is the best. Both methods works. <strong>The preferred method is implementing Runnable</strong>, and handing an instance of the implementation to a Thread instance.</p><p>A few reasons against extending Thread</p><ul><li>When extending the Thread class, we&#39;re not overriding any of its methods. Instead, we override the method of Runnable (which Thread happens to implement). This is a clear violation of IS-A Thread principle.</li><li>Creating an implementation of Runnable and passing it to the Thread class utilizes composition and not inheritance – which is more flexible</li><li>After extending the Thread class, we can&#39;t extend any other class From Java 8 onwards, Runnables can be represented as lambda expressions</li></ul><div class="custom-container danger"><p class="custom-container-title">Common Pitfall: Calling run() Instead of start()</p><p>When creating and starting a thread a common mistake is to call the run() method of the Thread instead of start(), like this:</p><blockquote><p>Thread newThread = new Thread(MyRunnable()); newThread.run(); //should be start();</p></blockquote><p>or</p><blockquote><p>MyRunnable runnable = new MyRunnable(); runnable.run();</p></blockquote><p>At first you may not notice anything because the Runnable&#39;s run() method is executed like you expected. However, it is <strong>NOT executed by the new thread</strong> you just created. Instead the run() method is executed by the thread that created the thread. In other words, the thread that executed the above two lines of code. To have the run() method of the MyRunnable instance called by the new created thread, newThread, you MUST call the newThread.start() method.</p></div>',5),R={render:function(s,n){const a=(0,l.up)("DownloadPDF-component"),R=(0,l.up)("DocumentCover-component"),x=(0,l.up)("RouterLink"),j=(0,l.up)("OutboundLink"),q=(0,l.up)("CodeGroupItem"),F=(0,l.up)("CodeGroup");return(0,l.wg)(),(0,l.iD)(l.HY,null,[(0,l.Wm)(a),(0,l.Wm)(R,{titulo:"3.1. Java classes for threads"}),e,(0,l._)("nav",o,[(0,l._)("ul",null,[(0,l._)("li",null,[(0,l.Wm)(x,{to:"#_2-1-1-runnable-interface"},{default:(0,l.w5)((()=>[p])),_:1}),(0,l._)("ul",null,[(0,l._)("li",null,[(0,l.Wm)(x,{to:"#java-class-implements-runnable"},{default:(0,l.w5)((()=>[t])),_:1})]),(0,l._)("li",null,[(0,l.Wm)(x,{to:"#anonymous-implementation-of-runnable"},{default:(0,l.w5)((()=>[r])),_:1})]),(0,l._)("li",null,[(0,l.Wm)(x,{to:"#java-lambda-implementation-of-runnable"},{default:(0,l.w5)((()=>[c])),_:1})]),(0,l._)("li",null,[(0,l.Wm)(x,{to:"#calling-the-run-method-on-a-runnable-class"},{default:(0,l.w5)((()=>[i])),_:1})])])]),(0,l._)("li",null,[(0,l.Wm)(x,{to:"#_2-1-2-thread-subclass"},{default:(0,l.w5)((()=>[A])),_:1})]),(0,l._)("li",null,[(0,l.Wm)(x,{to:"#_2-1-3-starting-a-thread-with-a-runnable"},{default:(0,l.w5)((()=>[y])),_:1}),(0,l._)("ul",null,[(0,l._)("li",null,[(0,l.Wm)(x,{to:"#subclass-or-runnable"},{default:(0,l.w5)((()=>[u])),_:1})])])])])]),b,d,h,m,E,D,(0,l._)("blockquote",null,[(0,l._)("p",null,[(0,l._)("a",_,[B,(0,l.Wm)(j)])])]),f,(0,l._)("blockquote",null,[(0,l._)("p",null,[(0,l._)("a",v,[g,(0,l.Wm)(j)])])]),w,(0,l.Wm)(F,null,{default:(0,l.w5)((()=>[(0,l.Wm)(q,{title:"Extends Thread",active:""},{default:(0,l.w5)((()=>[C])),_:1}),(0,l.Wm)(q,{title:"Runnable"},{default:(0,l.w5)((()=>[k])),_:1})])),_:1}),T],64)}}}}]);