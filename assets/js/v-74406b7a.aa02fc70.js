"use strict";(self.webpackChunkapuntes_psp=self.webpackChunkapuntes_psp||[]).push([[131],{8361:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-74406b7a",path:"/en/unit2/iostreams.html",title:"2.3 Handling Process Streams",lang:"en-US",frontmatter:{title:"2.3 Handling Process Streams"},excerpt:"",headers:[{level:2,title:"2.3.1  Redirecting Standard Input and Output",slug:"_2-3-1-redirecting-standard-input-and-output",children:[{level:3,title:"getInputStream()",slug:"getinputstream",children:[]},{level:3,title:"getErrorStream()",slug:"geterrorstream",children:[]},{level:3,title:"getOutputStream()",slug:"getoutputstream",children:[]},{level:3,title:"Inheriting the I/O of the parent process",slug:"inheriting-the-i-o-of-the-parent-process",children:[]},{level:3,title:"Pipelines",slug:"pipelines",children:[]}]},{level:2,title:"2.3.2 Current Java Process Information",slug:"_2-3-2-current-java-process-information",children:[]}],filePathRelative:"en/unit2/iostreams.md",git:{updatedTime:null,contributors:[]}}},413:(s,n,a)=>{a.r(n),a.d(n,{default:()=>g});var e=a(6252);const l=(0,e._)("h1",{id:"_2-3-handling-process-streams",tabindex:"-1"},"2.3 Handling Process Streams",-1),o={class:"table-of-contents"},p=(0,e.Uk)("2.3.1 Redirecting Standard Input and Output"),t=(0,e.Uk)("getInputStream()"),r=(0,e.Uk)("getErrorStream()"),c=(0,e.Uk)("getOutputStream()"),i=(0,e.Uk)("Inheriting the I/O of the parent process"),A=(0,e.Uk)("Pipelines"),y=(0,e.Uk)("2.3.2 Current Java Process Information"),u=(0,e._)("h2",{id:"_2-3-1-redirecting-standard-input-and-output",tabindex:"-1"},"2.3.1 Redirecting Standard Input and Output",-1),d=(0,e._)("p",null,"By default, the created subprocess does not have its terminal or console. All its standard I/O (i.e., stdin, stdout, stderr) operations will be sent to the parent process. Thereby the parent process can use these streams to feed input to and get output from the subprocess.",-1),B=(0,e._)("p",null,"Consequently, this gives us a huge amount of flexibility as it gives us control over the input/output of our sub-process.",-1),m={class:"custom-container info"},D=(0,e.uE)('<p class="custom-container-title">OS I/O streams and pipes</p><p>Streams in Linux, like almost everything else, are treated as though they were files.</p><p>Each file associated with a process is allocated a unique number to identify it. These values are always used for stdin, stdout, and stderr:</p><ul><li>0: stdin</li><li>1: stdout</li><li>2: stderr</li></ul><p>So we can manage these three streams ins different ways. We can redirect a commandâ€™s output (stdout) to a file and still see any error messages (stderr) in the terminal window, or we can get input to a command from another command or file. Let&#39;s look at some examples:</p><blockquote><p># Redirects ls output to a file ls &gt; capture.txt<br> # Redirects ls output to cat input ls | cat<br> # Redirects error.sh output to capture.txt and its errors to error.txt ./error.sh 1&gt; capture.txt 2&gt; error.txt # Redirects error.sh output and its errors to the sema file, capture.txt ./error.sh &gt; capture.txt 2&gt;&amp;1 # Redirects input.sh input from dummy.txt contents ./input.sh &lt; dummy.txt # Redirects output form first command to input.sh input cat dummy.txt | ./input.sh</p></blockquote>',6),h={href:"https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-i-o-redirection",target:"_blank",rel:"noopener noreferrer"},b=(0,e.Uk)("Introduction to Linux I/O Redirection"),E=(0,e.uE)('<p>In a parent-child process relationship I/O streams are also redirected from child process to parent, using 3 pipes, one per each standard stream. Those pipes can be used like in a Linux system.</p><p><img src="/docs/media/unit2/pipe_with_two.jpg" alt="alt_text"></p><h3 id="getinputstream" tabindex="-1">getInputStream()</h3><p>We can fetch the output generated by a subprocess and consume within the parent process thus allowing share information between the processes</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> p </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> pbuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> processOutput </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getInputStream</span><span style="color:#39ADB5;">()));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9C3EDA;">String</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">;</span><span style="color:#90A4AE;">    </span></span>\n<span class="line"><span style="color:#39ADB5;font-style:italic;">while</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">((</span><span style="color:#90A4AE;">linea </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> processOutput</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">())</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">!=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">null)</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">{</span></span>\n<span class="line"><span style="color:#90A4AE;">    System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">&gt; </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> linea</span><span style="color:#39ADB5;">);</span><span style="color:#90A4AE;">        </span></span>\n<span class="line"><span style="color:#39ADB5;">}</span><span style="color:#90A4AE;">            </span></span>\n<span class="line"><span style="color:#90A4AE;">processOutput</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span><span style="color:#90A4AE;">    </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">Charset and encodings</p><p>From the time being computer science started we&#39;ve been in trouble with encodings and charsets. And windows console is not an exception.</p><p>Terminal in Windows was also known as &quot;DOS prompt&quot;: so a way to run DOS programs in Windows, so they keep the code page of DOS. Microsoft dislikes non-backward compatible changes, so your DOS program should works also on Windows terminal without problem.</p><p>Wikipedia indicates that <strong>CP850</strong> has theoretically been &quot;largely replaced&quot; by <strong>Windows-1252</strong> and, later, Unicode, but yet it&#39;s here, right in the OS&#39;s terminal.</p><p>Then, if we want to print information from the console in our applications we must deal with the right charset and encoding, that is, CP-850.</p><p>Fortunately, InputStreamReader has a constructor to manage streams with any encodig, so we must use it when working with console commands or applications.</p><blockquote><p>new InputStreamReader(p.getInputStream(), &quot;CP850&quot;);</p></blockquote></div><h3 id="geterrorstream" tabindex="-1">getErrorStream()</h3><p>Interestingly we can also fetch the errors generated from the subprocess and thereon perform some processing.</p><p>Let&#39;s see an example</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> p </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> pbuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"><span style="color:#9C3EDA;">BufferedReader</span><span style="color:#90A4AE;"> processError </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">BufferedReader</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">InputStreamReader</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">p</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getErrorStream</span><span style="color:#39ADB5;">()));</span></span>\n<span class="line"><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> value </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Integer</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">parseInt</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">processError</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">readLine</span><span style="color:#39ADB5;">());</span></span>\n<span class="line"><span style="color:#90A4AE;">processError</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">close</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="getoutputstream" tabindex="-1">getOutputStream()</h3><p>We can even send input to a subprocess from a parent process</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">Writer</span><span style="color:#90A4AE;"> w </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">OutputStreamWriter</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">process</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">getOutputStream</span><span style="color:#39ADB5;">(),</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">UTF-8</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"><span style="color:#90A4AE;">w</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">write</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">send to child</span><span style="color:#90A4AE;">\\n</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="inheriting-the-i-o-of-the-parent-process" tabindex="-1">Inheriting the I/O of the parent process</h3><p>With the inheritIO() method We can redirect the sub-process I/O to the standard I/O of the current process (parent process)</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">ProcessBuilder</span><span style="color:#90A4AE;"> processBuilder </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ProcessBuilder</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">/bin/sh</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">-c</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">echo hello</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#90A4AE;">processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">inheritIO</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> process </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9C3EDA;">int</span><span style="color:#90A4AE;"> exitCode </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> process</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">waitFor</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>In the above example, by using the inheritIO() method we see the output of a simple command in the console in our IDE.</p><h3 id="pipelines" tabindex="-1">Pipelines</h3><p>Java 9 introduced the concept of pipelines to the ProcessBuilder API:</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">public</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">static</span><span style="color:#90A4AE;"> </span><span style="color:#9C3EDA;">List</span><span style="color:#39ADB5;">&lt;</span><span style="color:#90A4AE;">Process</span><span style="color:#39ADB5;">&gt;</span><span style="color:#90A4AE;"> startPipelineâ€‹</span><span style="color:#39ADB5;">(</span><span style="color:#9C3EDA;">List</span><span style="color:#39ADB5;">&lt;</span><span style="color:#90A4AE;">ProcessBuilder</span><span style="color:#39ADB5;">&gt;</span><span style="color:#90A4AE;"> builders</span><span style="color:#39ADB5;">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Using the startPipeline method we can pass a list of ProcessBuilder objects. This static method will then start a Process for each ProcessBuilder. Thus, creating a pipeline of processes which are linked by their standard output and standard input streams.</p><p>For example, if we want to run something like this:</p><blockquote><p>find . -name *.java -type f | wc -l</p></blockquote><p>What we&#39;d do is create a process builder for each isolated command and compose them into a pipeline</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">List</span><span style="color:#90A4AE;"> builders </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> Arrays</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">asList</span><span style="color:#39ADB5;">(</span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ProcessBuilder</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">find</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">src</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">-name</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">*.java</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">-type</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">f</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">),</span><span style="color:#90A4AE;"> </span></span>\n<span class="line"><span style="color:#90A4AE;">    </span><span style="color:#39ADB5;font-style:italic;">new</span><span style="color:#90A4AE;"> </span><span style="color:#6182B8;">ProcessBuilder</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">wc</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">,</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">-l</span><span style="color:#39ADB5;">&quot;</span><span style="color:#39ADB5;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#9C3EDA;">List</span><span style="color:#90A4AE;"> processes </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> ProcessBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">startPipeline</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">builders</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> last </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> processes</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">get</span><span style="color:#39ADB5;">(</span><span style="color:#90A4AE;">processes</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">size</span><span style="color:#39ADB5;">()</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">-</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#90A4AE;font-style:italic;">// We can get lats process output to get the final results</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>In the example, we&#39;re searching for all the java files inside the src directory and piping the results into another process to count them.</p><h2 id="_2-3-2-current-java-process-information" tabindex="-1">2.3.2 Current Java Process Information</h2><p>We can now obtain a lot of information about the process via the API <code>java.lang.ProcessHandle.Info</code> API:</p><ul><li>the command used to start the process</li><li>the arguments of the command</li><li>time instant when the process was started</li><li>total time spent by it and the user who created it</li></ul><p>Here&#39;s how we can do that</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">ProcessHandle</span><span style="color:#90A4AE;"> processHandle </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> ProcessHandle</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">current</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"><span style="color:#9C3EDA;">ProcessHandle</span><span style="color:#39ADB5;">.</span><span style="color:#9C3EDA;">Info</span><span style="color:#90A4AE;"> processInfo </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> processHandle</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">info</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#90A4AE;">System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">PID: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> processHandle</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">pid</span><span style="color:#39ADB5;">());</span></span>\n<span class="line"><span style="color:#90A4AE;">System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Arguments: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> processInfo</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">arguments</span><span style="color:#39ADB5;">());</span></span>\n<span class="line"><span style="color:#90A4AE;">System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Command: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> processInfo</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">command</span><span style="color:#39ADB5;">());</span></span>\n<span class="line"><span style="color:#90A4AE;">System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Instant: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> processInfo</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">startInstant</span><span style="color:#39ADB5;">());</span></span>\n<span class="line"><span style="color:#90A4AE;">System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">Total CPU duration: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> processInfo</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">totalCpuDuration</span><span style="color:#39ADB5;">());</span></span>\n<span class="line"><span style="color:#90A4AE;">System</span><span style="color:#39ADB5;">.</span><span style="color:#90A4AE;">out</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">println</span><span style="color:#39ADB5;">(</span><span style="color:#39ADB5;">&quot;</span><span style="color:#91B859;">User: </span><span style="color:#39ADB5;">&quot;</span><span style="color:#90A4AE;"> </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> processInfo</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">user</span><span style="color:#39ADB5;">());</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>It is also possible to get the process information of a newly spawned process. In this case, after we spawn the process and get an instance of the <code>java.lang.Process</code>, we invoke the <code>toHandle()</code> method on it to get an instance of java.lang.ProcessHandle.</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#9C3EDA;">Process</span><span style="color:#90A4AE;"> process </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> processBuilder</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">inheritIO</span><span style="color:#39ADB5;">().</span><span style="color:#6182B8;">start</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"><span style="color:#9C3EDA;">ProcessHandle</span><span style="color:#90A4AE;"> processHandle </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> process</span><span style="color:#39ADB5;">.</span><span style="color:#6182B8;">toHandle</span><span style="color:#39ADB5;">();</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>The rest of the details remain the same as in the section above</p>',34),g={render:function(s,n){const a=(0,e.up)("DownloadPDF-component"),g=(0,e.up)("DocumentCover-component"),f=(0,e.up)("RouterLink"),v=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[(0,e.Wm)(a),(0,e.Wm)(g,{titulo:"2.3 Handling Process Streams"}),l,(0,e._)("nav",o,[(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(f,{to:"#_2-3-1-redirecting-standard-input-and-output"},{default:(0,e.w5)((()=>[p])),_:1}),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(f,{to:"#getinputstream"},{default:(0,e.w5)((()=>[t])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(f,{to:"#geterrorstream"},{default:(0,e.w5)((()=>[r])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(f,{to:"#getoutputstream"},{default:(0,e.w5)((()=>[c])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(f,{to:"#inheriting-the-i-o-of-the-parent-process"},{default:(0,e.w5)((()=>[i])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(f,{to:"#pipelines"},{default:(0,e.w5)((()=>[A])),_:1})])])]),(0,e._)("li",null,[(0,e.Wm)(f,{to:"#_2-3-2-current-java-process-information"},{default:(0,e.w5)((()=>[y])),_:1})])])]),u,d,B,(0,e._)("div",m,[D,(0,e._)("p",null,[(0,e._)("a",h,[b,(0,e.Wm)(v)])])]),E],64)}}}}]);