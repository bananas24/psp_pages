"use strict";(self.webpackChunkapuntes_psp=self.webpackChunkapuntes_psp||[]).push([[128],{8167:(e,t,a)=>{a.r(t),a.d(t,{data:()=>o});const o={key:"v-b73e4fa6",path:"/en/unit3/",title:"3 Introduction",lang:"en-US",frontmatter:{title:"3 Introduction"},excerpt:"",headers:[{level:2,title:"Goals",slug:"goals",children:[]}],filePathRelative:"en/unit3/index.md",git:{updatedTime:1634516822e3,contributors:[{name:"Vicente MartÃ­nez",email:"vicente@iesdoctorbalmis.com",commits:1}]}}},4140:(e,t,a)=>{a.r(t),a.d(t,{default:()=>r});const o=(0,a(6252).uE)('<h1 id="unit-3-multithread-programming" tabindex="-1">Unit 3. Multithread programming</h1><p>After leaning the basics of concurrent programming and learn how processes can be used to do multitasking, in this unit we are going to look into a single process.</p><p>We are gonna make use of threads and the eay they are programmed to do concurrent task into a process.</p><p>key differences between processes and threads are:</p><ul><li>Threads share process memory space</li><li>Threads share file descriptors</li><li>Threads share program code.</li></ul><p>As they run into the context of a process, the TCB (Tread Control Block) is smaller than the PCB (Process Control Block) because they share part of PCB. That&#39;s why sometimes threads are so called <code>lightweight processes</code>.</p><p>All previous features simplify threads communication, thus coordination and synchronization becomes harder to program and manage.</p><h2 id="goals" tabindex="-1">Goals</h2><p>The goals for this unit are:</p><ul><li>To know thread characteristics in Java</li><li>To Learn how to create and manage threads</li><li>To debug multithread applications</li><li>To use synchronization methods for processes and sub-processes</li><li>To share information between threads on a process</li><li>To learn about shared memory problems</li><li>To use different programming approaches to synchronize threads execution</li></ul>',10),r={render:function(e,t){return o}}}}]);