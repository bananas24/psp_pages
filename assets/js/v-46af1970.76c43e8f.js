"use strict";(self.webpackChunkapuntes_psp=self.webpackChunkapuntes_psp||[]).push([[697],{8920:(e,s,a)=>{a.r(s),a.d(s,{data:()=>n});const n={key:"v-46af1970",path:"/es/unit1/concurrency.html",title:"1.2 Concurrencia",lang:"es-ES",frontmatter:{title:"1.2 Concurrencia"},excerpt:"",headers:[{level:2,title:"1.2.1. Concurrencia vs Paralelismo",slug:"_1-2-1-concurrencia-vs-paralelismo",children:[{level:3,title:"Monoproceso",slug:"monoproceso",children:[]},{level:3,title:"Multiprogramación",slug:"multiprogramacion",children:[]},{level:3,title:"Paralelismo",slug:"paralelismo",children:[]}]},{level:2,title:"1.2.2. Sistemas distribuidos",slug:"_1-2-2-sistemas-distribuidos",children:[]},{level:2,title:"1.2.3. Ventajas e inconvenientes",slug:"_1-2-3-ventajas-e-inconvenientes",children:[]},{level:2,title:"1.2.4. Condiciones de Bernstein",slug:"_1-2-4-condiciones-de-bernstein",children:[]}],filePathRelative:"es/unit1/concurrency.md",git:{updatedTime:1629986222e3,contributors:[{name:"Vicente Martínez",email:"vicente@iesdoctorbalmis.com",commits:1}]}}},7900:(e,s,a)=>{a.r(s),a.d(s,{default:()=>z});var n=a(6252);const l=(0,n._)("h1",{id:"_1-2-concurrencia",tabindex:"-1"},"1.2. Concurrencia",-1),o={class:"table-of-contents"},i=(0,n.Uk)("1.2.1. Concurrencia vs Paralelismo"),t=(0,n.Uk)("Monoproceso"),r=(0,n.Uk)("Multiprogramación"),c=(0,n.Uk)("Paralelismo"),u=(0,n.Uk)("1.2.2. Sistemas distribuidos"),p=(0,n.Uk)("1.2.3. Ventajas e inconvenientes"),d=(0,n.Uk)("1.2.4. Condiciones de Bernstein"),m=(0,n.Uk)("Según el diccionario de la "),b={href:"https://dle.rae.es/concurrencia?m=form",target:"_blank",rel:"noopener noreferrer"},g=(0,n.Uk)("RAE"),v=(0,n.Uk)(" una de las acepciones de concurrencia es"),y=(0,n.uE)('<blockquote><p>Coincidencia, concurso simultáneo de varias circunstancias.</p></blockquote><p>Si cambiamos circunstancias por <code>procesos</code>, ya tendríamos una definición cercana a lo que significa concurrencia en el mundo digital</p><p>Si nos fijamos, no es la primera vez que surge la palabra <code>proceso</code> en este texto, y es que los procesos son una pieza fundamental del puzle, por no decir la parte más importante.</p><h2 id="_1-2-1-concurrencia-vs-paralelismo" tabindex="-1">1.2.1. Concurrencia vs Paralelismo</h2><p>Ahora que ya sabemos qué es un proceso, vamos a ver la relación que éstos tienen con el hardware en el que se ejecutan.</p><h3 id="monoproceso" tabindex="-1">Monoproceso</h3><p>Por mucho que tengamos varios procesos procesos ejecutándose a la vez, si sólo tenemos un microprocesador para atenderlos a todos, estas tareas nunca van a poder ejecutarse a la vez.</p><p>Una posibilidad sería la ejecución secuencias de las tareas en el sistema. Se empieza a ejecutar una tarea y, hasta que esta no finaliza, el sistema no empieza a ejecutar la siguiente. Esto se correspondería con sistemas que sólo son capaces de hacer una tarea a la vez, algo raro hoy en día.</p><p><img src="/media/gantt_sequential.svg" alt="Secuential execution of tasks (monoprocessor system)"></p><h3 id="multiprogramacion" tabindex="-1">Multiprogramación</h3><p>Para que los procesos no tengan que esperar a que todos los demás se ejecuten, los sistemas aprovechan y exprimen los recursos al máximo, permitiendo la ilusión de que varios procesos se ejecutan de forma simultánea. Esto es lo que se conoce como <code>multitarea</code>.</p><p>En estos sistemas, se aprovecha el diseño de los sistemas operativos modernos, y de las operaciones que realizan los procesos que no requieren el uso del procesador (esperar a una operación de E/S, una interacción con el usuario, la recepción de información desde la red, etc.) para poder ejecutar otros procesos. La ejecución se multiplexa en el tiempo.</p><p><img src="/media/gantt_concurrent.svg" alt="Concurrent execution of tasks (monoprocessor system)"></p><p>Como se puede observar en las dos imágenes anteriores (aunque se trata sólo de un modelo), el tiempo de uso total del procesador es igual en ambos casos, es decir, que el sistema tardará el mismo tiempo en completar todas las tareas. Sin embargo, la sensación es que todas las tareas se están realizando a la vez.</p><h3 id="paralelismo" tabindex="-1">Paralelismo</h3><p>Con el avance de la tecnología ahora la gran mayoría de dispositivos, desde los equipos de escritorio, portátiles, dispositivos móviles, ... hasta los dispositivos IoT, tienen capacidades de multiproceso, es decir, tienen más de un procesador para poder realizar varias tareas a la vez de forma real, no simulada. A este tipo de ejecución es a lo que llamamos <code>paralelismo</code>.</p><p><img src="/media/gantt_parallel.svg" alt="Parallel execution of tasks (dual processor system)"></p><p>En este caso, a mayor número de unidades de proceso, menor tiempo tardarán las tareas en completarse y mayor será la sensación de rapidez que notará el usuario. Este es uno de los retos de los sistemas operativos, planificar adecuadamente las tareas para minimizar los tiempos de ejecución, de espera y el uso de los recursos del sistema, el procesador principalmente.</p><div class="custom-container question"><p class="custom-container-title">núcleos vs hilos</p><p>Si habéis comprado un procesador hace poco, o estáis al día en cuanto al hardware, sabréis que una de las características de los procesadores es su <strong>número de núcleos</strong> (4, 8, 16).</p><p>Pero además, al número de núcleos lo acompaña otra característica que es el número de <strong>hilos o threads</strong>, que suele ser el doble que el de núcleos.</p><p>¿Qué implicación tienen los threads de un procesador con respecto a la concurrencia? ¿Si un equipo tiene 8 núcleos / 16 hilos significa eso que puede ejecutar 16 procesos a la vez?</p></div><h2 id="_1-2-2-sistemas-distribuidos" tabindex="-1">1.2.2. Sistemas distribuidos</h2><blockquote><p>&quot;Un sistema distribuido es una colección de computadores independientes que aparecen ante los usuarios como un único sistema coherente&quot;</p><p>&quot;Andrew S. Tanembaum&quot;</p></blockquote><p>Posiblemente el ejemplo más famoso y conocido de sistema distribuido sea <code>Internet</code>.Internet aparece ante los usuarios como un enorme repositorio de documentos, es decir, como un único sistema capaz de proveer casi cualquier tipo de información o servicio que se necesite. No obstante, sabemos que está compuesta por millones de equipos ubicados en localizaciones diferentes e interconectados entre sí.</p><p>Nace de la necesidad de compartir recursos. Actualmente el máximo exponente de este tipo de sistemas es el <code>Cloud Computing</code> o servicios en la nube. Un sistema es distribuido cuando los componentes software están distribuidos en la red, se comunican y coordinan mediante el paso de mensajes.</p><p>Las características de este tipo de sistemas son::</p><ul><li>Concurrencia: ejecución de programas concurrentes.</li><li>Inexistencia de un reloj global. Implica sincronizarse con el paso de mensajes.</li><li>Fallos independientes: cada componente del sistema puede fallar sin que perjudique la ejecución de los demás.</li></ul><h2 id="_1-2-3-ventajas-e-inconvenientes" tabindex="-1">1.2.3. Ventajas e inconvenientes</h2><p>Ventajas del procesamiento paralelo:</p><ul><li>Ejecución simultánea de tareas.</li><li>Disminuye el tiempo total de ejecución</li><li>Resuelve problemas complejos y de grandes dimensiones.</li><li>Utilización de recursos no locales distribuidos en la red</li><li>Disminución de costos, aprevechando los recursos distribuidos, no es necesario gastar en un único supercomputardor, se puede alcanzar el mismo poder de computación con equipos más modestos distribuidos.</li></ul><p>Inconvenientes del procesamiento paralelo:</p>',29),A=(0,n._)("li",null,"Los compiladores y entornos de programación para sistemas paralelos son más complicados de desarrollar.",-1),S=(0,n._)("li",null,"Los programas paralelos son más difíciles de escribir",-1),E=(0,n._)("li",null,"Hay mayor consumo de energía",-1),j=(0,n._)("li",null,"Mayor complejidad en el acceso a datos",-1),h=(0,n.Uk)("Complejidad a la hora de la comunicación y sincronización de las diferentes subtareas. "),q=(0,n.uE)('<p>Ventajas de la programación distribuida</p><ul><li>Se comparten recursos y datos</li><li>Crecimiento bajo demanda</li><li>Mayor flexibildad para distribuir la carga</li><li>Alta disponibilidad</li><li>Soporte de aplicaciones distribuidas</li><li>Filosofía abierta y hetereogénea</li></ul><div class="custom-container question"><p class="custom-container-title">Escalado de sistemas</p><p>Con escalado nos referimos a la posibilidad de incrementar las capacidades de un sistema.</p><p>Investiga las diferencias, ventajas e inconvenientes del <code>escalado horizontal</code> y el <code>escalado vertical</code>.</p></div><p>Inconvenientes de la programación distribuida</p><ul><li>Aumenta la complejidad</li><li>Se necesita software nuevo especializado</li><li>Problemas derivados de las comunicaciones (perdidas, saturaciones, etc.)</li><li>Problemas de seguridad, ataques DDoS</li></ul><p>Ejemplos de utilización de la programación paralela y distribuida</p><ul><li>Estudios meteorológicos</li><li>Estudios del genoma humano</li><li>Modelado de la biosfera</li><li>Predicciones sísmicas</li><li>Simulación de moléculas</li></ul>',7),f={class:"custom-container info"},_=(0,n._)("p",{class:"custom-container-title"},"Ejemplo de programación paralela y distribuida",-1),k={href:"https://setiathome.berkeley.edu/sah_about.php",target:"_blank",rel:"noopener noreferrer"},D=(0,n.Uk)("Búsqueda de inteligencia extraterrestre - Proyecto SETI"),x=(0,n.uE)('<h2 id="_1-2-4-condiciones-de-bernstein" tabindex="-1">1.2.4. Condiciones de Bernstein</h2><p>Una vez que sabemos qué es un programa concurrente y las distintas arquitecturas hardware que pueden soportarlo, vamos a ver qué partes de un programa se pueden ejecutar de forma concurrente y cuáles no.</p><p>Si observamos el siguiente código, queda claro que la primera instrucción se debe ejecutar antes que la segunda para que el resultado sea siempre el mismo (para los mismos datos de entrada).</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#90A4AE;">x </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> x </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">;</span></span>\n<span class="line"><span style="color:#90A4AE;">y </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> x </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Sin embargo, en un código como el siguiente el órden en el que se ejecuten las instrucciones no influye en el resultado final (valor de las variables). En este caso se pueden ejecutar las tres sentencias a la vez incrementando la velocidad de procesamiento.</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#90A4AE;">x </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">;</span></span>\n<span class="line"><span style="color:#90A4AE;">y </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">2</span><span style="color:#39ADB5;">;</span></span>\n<span class="line"><span style="color:#90A4AE;">z </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">3</span><span style="color:#39ADB5;">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>A.J. Bernstein definió unas condiciones para determinar si dos conjuntos de instrucciones S<sub>i</sub> y S<sub>j</sub> se pueden ejecutar concurrentemente.</p><p>Para poder determinar si dos conjuntos de instrucciones se pueden ejecutar concurrentemente, se definen en primer lugar los siguientes conjuntos</p><ul><li>L(S<sub>k</sub>) = {a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, ...} como el conjunto de lectura formado por todas las variables cuyos valores se leen durante la ejecución de las instrucciones del conjunto k.</li><li>E(S<sub>k</sub>) = {b<sub>1</sub>, b<sub>2</sub>, b<sub>3</sub>, ...} como el conjunto de escritura formado por todas las variables cuyos valores se actualizan durante la ejecución de las instrucciones del conjunto k.</li></ul><p>Para que dos conjuntos de instrucciones S<sub>i</sub> y S<sub>j</sub> se puedan ejecutar concurrentemente, se deben cumplir estas tres condiciones de forma simultánea.</p><ul><li>L(S<sub>i</sub>) ∩ E(S<sub>j</sub>)</li><li>E(S<sub>i</sub>) ∩ L(S<sub>j</sub>)</li><li>E(S<sub>i</sub>) ∩ E(S<sub>j</sub>)</li></ul><div class="custom-container question"><p class="custom-container-title">Cuales de estas instrucciones se pueden ejecutar de forma concurrente</p><div class="language-java ext-java line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#90A4AE;">a </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> x </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> y</span><span style="color:#39ADB5;">;</span></span>\n<span class="line"><span style="color:#90A4AE;">b </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> z </span><span style="color:#39ADB5;">-</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">;</span></span>\n<span class="line"><span style="color:#90A4AE;">c </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> a </span><span style="color:#39ADB5;">-</span><span style="color:#90A4AE;"> b</span><span style="color:#39ADB5;">;</span></span>\n<span class="line"><span style="color:#90A4AE;">w </span><span style="color:#39ADB5;">=</span><span style="color:#90A4AE;"> c </span><span style="color:#39ADB5;">+</span><span style="color:#90A4AE;"> </span><span style="color:#F76D47;">1</span><span style="color:#39ADB5;">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div><p>Primero deberíamos obtener los conjuntos L y E para cada sentencia</p><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#90A4AE;">    L(S&lt;sub&gt;1&lt;/sub&gt;) = {x, y}   E(S&lt;sub&gt;1&lt;/sub&gt;) = {a}\n\n    L(S&lt;sub&gt;2&lt;/sub&gt;) = {z}      E(S&lt;sub&gt;1&lt;/sub&gt;) = {b}\n\n    L(S&lt;sub&gt;3&lt;/sub&gt;) = {a, b}   E(S&lt;sub&gt;3&lt;/sub&gt;) = {c}\n\n    L(S&lt;sub&gt;4&lt;/sub&gt;) = {c}      E(S&lt;sub&gt;4&lt;/sub&gt;) = {w}\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Y ahora aplicarlas entre cada par de sentencias</p><div class="language-text ext-text line-numbers-mode"><pre class="shiki" style="background-color:#FAFAFA;"><code><span class="line"><span style="color:#90A4AE;">L(S&lt;sub&gt;1&lt;/sub&gt;) ∩ E(S&lt;sub&gt;2&lt;/sub&gt;) = ∅\nE(S&lt;sub&gt;1&lt;/sub&gt;) ∩ L(S&lt;sub&gt;2&lt;/sub&gt;) = ∅\nE(S&lt;sub&gt;1&lt;/sub&gt;) ∩ E(S&lt;sub&gt;2&lt;/sub&gt;) = ∅         // Sí se pueden ejecutar concurrentemente\n\nL(S&lt;sub&gt;1&lt;/sub&gt;) ∩ E(S&lt;sub&gt;3&lt;/sub&gt;) = ∅\nE(S&lt;sub&gt;1&lt;/sub&gt;) ∩ L(S&lt;sub&gt;3&lt;/sub&gt;) = {a} ≠ ∅\nE(S&lt;sub&gt;1&lt;/sub&gt;) ∩ E(S&lt;sub&gt;3&lt;/sub&gt;) = ∅         // NO\n\nL(S&lt;sub&gt;1&lt;/sub&gt;) ∩ E(S&lt;sub&gt;4&lt;/sub&gt;) = ∅\nE(S&lt;sub&gt;1&lt;/sub&gt;) ∩ L(S&lt;sub&gt;4&lt;/sub&gt;) = ∅\nE(S&lt;sub&gt;1&lt;/sub&gt;) ∩ E(S&lt;sub&gt;4&lt;/sub&gt;) = ∅         // Sí se pueden ejecutar concurrentemente\n\nL(S&lt;sub&gt;2&lt;/sub&gt;) ∩ E(S&lt;sub&gt;3&lt;/sub&gt;) = ∅\nE(S&lt;sub&gt;2&lt;/sub&gt;) ∩ L(S&lt;sub&gt;3&lt;/sub&gt;) = ∅\nE(S&lt;sub&gt;2&lt;/sub&gt;) ∩ E(S&lt;sub&gt;3&lt;/sub&gt;) = ∅         // Sí se pueden ejecutar concurrentemente\n\nL(S&lt;sub&gt;2&lt;/sub&gt;) ∩ E(S&lt;sub&gt;4&lt;/sub&gt;) = ∅\nE(S&lt;sub&gt;2&lt;/sub&gt;) ∩ L(S&lt;sub&gt;4&lt;/sub&gt;) = ∅\nE(S&lt;sub&gt;2&lt;/sub&gt;) ∩ E(S&lt;sub&gt;4&lt;/sub&gt;) = ∅         // Sí se pueden ejecutar concurrentemente\n\nL(S&lt;sub&gt;3&lt;/sub&gt;) ∩ E(S&lt;sub&gt;4&lt;/sub&gt;) = ∅\nE(S&lt;sub&gt;3&lt;/sub&gt;) ∩ L(S&lt;sub&gt;4&lt;/sub&gt;) = {c} ≠ ∅\nE(S&lt;sub&gt;3&lt;/sub&gt;) ∩ E(S&lt;sub&gt;4&lt;/sub&gt;) = ∅         // NO\n</span></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>',16),z={render:function(e,s){const a=(0,n.up)("DownloadPDF-component"),z=(0,n.up)("DocumentCover-component"),B=(0,n.up)("RouterLink"),L=(0,n.up)("OutboundLink"),F=(0,n.up)("Badge");return(0,n.wg)(),(0,n.iD)(n.HY,null,[(0,n.Wm)(a),(0,n.Wm)(z,{titulo:"1.2. Concurrencia"}),l,(0,n._)("nav",o,[(0,n._)("ul",null,[(0,n._)("li",null,[(0,n.Wm)(B,{to:"#_1-2-1-concurrencia-vs-paralelismo"},{default:(0,n.w5)((()=>[i])),_:1}),(0,n._)("ul",null,[(0,n._)("li",null,[(0,n.Wm)(B,{to:"#monoproceso"},{default:(0,n.w5)((()=>[t])),_:1})]),(0,n._)("li",null,[(0,n.Wm)(B,{to:"#multiprogramacion"},{default:(0,n.w5)((()=>[r])),_:1})]),(0,n._)("li",null,[(0,n.Wm)(B,{to:"#paralelismo"},{default:(0,n.w5)((()=>[c])),_:1})])])]),(0,n._)("li",null,[(0,n.Wm)(B,{to:"#_1-2-2-sistemas-distribuidos"},{default:(0,n.w5)((()=>[u])),_:1})]),(0,n._)("li",null,[(0,n.Wm)(B,{to:"#_1-2-3-ventajas-e-inconvenientes"},{default:(0,n.w5)((()=>[p])),_:1})]),(0,n._)("li",null,[(0,n.Wm)(B,{to:"#_1-2-4-condiciones-de-bernstein"},{default:(0,n.w5)((()=>[d])),_:1})])])]),(0,n._)("p",null,[m,(0,n._)("a",b,[g,(0,n.Wm)(L)]),v]),y,(0,n._)("ul",null,[A,S,E,j,(0,n._)("li",null,[h,(0,n.Wm)(F,{type:"danger",text:"cuidado",vertical:"middle"})])]),q,(0,n._)("div",f,[_,(0,n._)("p",null,[(0,n._)("a",k,[D,(0,n.Wm)(L)])])]),x],64)}}}}]);