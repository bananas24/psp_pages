import{_ as u,a as r}from"./Java_Stream_Readers_BufferedReaders.170e97e8.js";import{_ as d,r as p,o as k,c as m,d as s,a as n,w as e,b as a,f as o}from"./app.108f91ed.js";const v={},h=n("h1",{id:"_2-3-handling-process-streams",tabindex:"-1"},"2.3 Handling Process Streams",-1),g={class:"table-of-contents"},f=a("2.3.1 Redirecting Standard Input and Output"),b=a("getInputStream()"),w=a("getErrorStream()"),y=a("getOutputStream()"),_=a("Inheriting the I/O of the parent process"),q=a("Pipelines"),I=a("2.3.2 Redirecting Standard Input and Output"),P=a("2.3.3 Current Java Process Information"),S=o(`<h2 id="_2-3-1-redirecting-standard-input-and-output" tabindex="-1">2.3.1 Redirecting Standard Input and Output</h2><p>By default, the created subprocess does not have its terminal or console. All its standard I/O (i.e., stdin, stdout, stderr) operations will be sent to the parent process. Thereby the parent process can use these streams to feed input to and get output from the subprocess.</p><p>Consequently, this gives us a huge amount of flexibility as it gives us control over the input/output of our sub-process.</p><p>::: info OS I/O streams and pipes Streams in Linux, like almost everything else, are treated as though they were files.</p><p>Each file associated with a process is allocated a unique number to identify it. These values are always used for stdin, stdout, and stderr:</p><ul><li>0: stdin</li><li>1: stdout</li><li>2: stderr</li></ul><p>So we can manage these three streams in different ways. We can redirect a command\u2019s output (stdout) to a file and still see any error messages (stderr) in the terminal window, or we can get input to a command from another command or file. Let&#39;s look at some examples:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># Redirects ls output to a file</span>
<span class="token function">ls</span> <span class="token operator">&gt;</span> capture.txt  
<span class="token comment"># Redirects ls output to cat input</span>
<span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">cat</span>  
<span class="token comment"># Redirects program.sh output to capture.txt and its errors to error.txt</span>
./program.sh <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> capture.txt <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> error.txt 
<span class="token comment"># Redirects program.sh output and its errors to the same file, capture.txt</span>
./program.sh <span class="token operator">&gt;</span> capture.txt <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span>
<span class="token comment"># Redirects program.sh input from dummy.txt contents</span>
./program.sh <span class="token operator">&lt;</span> dummy.txt
<span class="token comment"># Redirects output form first command to program.sh input</span>
<span class="token function">cat</span> dummy.txt <span class="token operator">|</span> ./program.sh
</code></pre></div>`,8),j={href:"https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-i-o-redirection",target:"_blank",rel:"noopener noreferrer"},x=a("Introduction to Linux I/O Redirection"),B=a(" :::"),O=o('<p>In a parent-child process relationship I/O streams are also redirected from child process to parent, using 3 pipes, one per each standard stream. Those pipes can be used like in a Linux system.</p><p><img src="'+u+`" alt="alt_text"></p><h3 id="getinputstream" tabindex="-1">getInputStream()</h3><p>We can fetch the output generated by a subprocess and consume within the parent process thus allowing share information between the processes</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Process</span> p <span class="token operator">=</span> pbuilder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BufferedReader</span> processOutput <span class="token operator">=</span> 
    <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> linea<span class="token punctuation">;</span>    
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>linea <span class="token operator">=</span> processOutput<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;&gt; &quot;</span> <span class="token operator">+</span> linea<span class="token punctuation">)</span><span class="token punctuation">;</span>        
<span class="token punctuation">}</span>            
processOutput<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt="alt_text"></p><div class="custom-container warning"><p class="custom-container-title">Charset and encodings</p><p>From the time being computer science started we&#39;ve been in trouble with encodings and charsets. And windows console is not an exception.</p><p>Terminal in Windows was also known as &quot;DOS prompt&quot;: so a way to run DOS programs in Windows, so they keep the code page of DOS. Microsoft dislikes non-backward compatible changes, so your DOS program should works also on Windows terminal without problem.</p><p>Wikipedia indicates that <strong>CP850</strong> has theoretically been &quot;largely replaced&quot; by <strong>Windows-1252</strong> and, later, Unicode, but yet it&#39;s here, right in the OS&#39;s terminal.</p><p>Then, if we want to print information from the console in our applications we must deal with the right charset and encoding, that is, CP-850.</p><p>Fortunately, InputStreamReader has a constructor to manage streams with any encoding, so we must use it when working with console commands or applications.</p><div class="language-java ext-java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;CP850&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><blockquote><p>We can force Netbeans to use a UTF-8 as default encoding. To do so we must modify its config file <code>C:/Program Files/Netbeeans-xx.x/netbeans/etc/netbeans.conf</code>, changing directive <code>netbeans_default_option</code> and adding <strong>-J-Dfile.encoding=UTF-8</strong> to the end.</p></blockquote></div><h3 id="geterrorstream" tabindex="-1">getErrorStream()</h3><p>Interestingly we can also fetch the errors generated from the subprocess and thereon perform some processing.</p><p>if error output has been redirected by calling method <code>ProcessBuilder.redirectErrorStream(true)</code> then, the error stream and the output stream will be shown using the same stream.</p><p>If we want to have it differentiated from the output, then we can use asimilar schema than before</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Process</span> p <span class="token operator">=</span> pbuilder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BufferedReader</span> processError <span class="token operator">=</span> 
    <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getErrorStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>processError<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
processError<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: info Decorator or Wrapper design pattern In both input and error streams we are getting information from a BufferedReader. Although we are not aware of using a design pattern, we are using the *<em>decorator design pattern&quot;</em> or the so called <strong>wrapper</strong>.</p><blockquote><p>Decorator is a structural design pattern that lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the required behaviors.</p></blockquote>`,14),R={href:"https://refactoring.guru/design-patterns/java",target:"_blank",rel:"noopener noreferrer"},F=a("Refactoring.Guru design patterns"),W=a(" :::"),T=o(`<p>Let&#39;s look at a complete example code using all the above operations</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ejercicio2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> comando <span class="token operator">=</span> <span class="token string">&quot;notepad&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">ProcessBuilder</span> pbuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span> <span class="token punctuation">(</span>comando<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Process</span> p <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            p <span class="token operator">=</span> pbuilder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 1- Procedemos a leer lo que devuelve el proceso hijo</span>
            <span class="token class-name">InputStream</span> is <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 2- Lo convertimos en un InputStreamReader</span>
            <span class="token comment">// De esta forma podemos leer caracteres en vez de bytes</span>
            <span class="token comment">// El InputStreamReader nos permite gestionar diferentes codificaciones</span>
            <span class="token class-name">InputStreamReader</span> isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 2- Para mejorar el rendimiento hacemos un wrapper sobre un BufferedReader</span>
            <span class="token comment">// De esta forma podemos leer enteros, cadenas o incluso l\xEDneas.</span>
            <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>isr<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// A Continuaci\xF3n leemos todo como una cadena, l\xEDnea a l\xEDnea</span>
            <span class="token class-name">String</span> linea<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>linea <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linea<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Error en: &quot;</span><span class="token operator">+</span>comando<span class="token punctuation">)</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// Para finalizar, cerramos los recursos abiertos</span>
            br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getoutputstream" tabindex="-1">getOutputStream()</h3><p>We can even send input to a subprocess from a parent process</p><p>There are three different ways of sending information to a child process. The first one is based on an OutputStream. Here no wrapper is used and the programmer has to manage all elements of the stream flow. From newline characters and type conversions to force sending information over the stream.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Low-level objects. We have to manage all elements of communication</span>
<span class="token class-name">OutputStream</span> toProcess <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
toProcess<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>number1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
toProcess<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
toProcess<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The next one is based on a Writer object as a wrapper for the OutputStream, where communication management is easier, but the programmer still has to manage elements as new lines.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Writer</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
w<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;send to child\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, the top-level wrapper for using the OutputStream is the PrintWriter object, where we can use the wrapper with the same methods as the System.out to handle child communication flow.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">PrintWriter</span> toProcess <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>
            p<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
toProcess<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;sent to child&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inheriting-the-i-o-of-the-parent-process" tabindex="-1">Inheriting the I/O of the parent process</h3><p>With the inheritIO() method We can redirect the sub-process I/O to the standard I/O of the current process (parent process)</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ProcessBuilder</span> processBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;echo hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

processBuilder<span class="token punctuation">.</span><span class="token function">inheritIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Process</span> process <span class="token operator">=</span> processBuilder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> exitCode <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example, by using the inheritIO() method we see the output of a simple command in the console in our IDE.</p><h3 id="pipelines" tabindex="-1">Pipelines</h3><p>Java 9 introduced the concept of pipelines to the ProcessBuilder API:</p><div class="language-java ext-java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Process</span><span class="token punctuation">&gt;</span></span> startPipeline\u200B<span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProcessBuilder</span><span class="token punctuation">&gt;</span></span> builders<span class="token punctuation">)</span>
</code></pre></div><p>Using the startPipeline method we can pass a list of ProcessBuilder objects. This static method will then start a Process for each ProcessBuilder. Thus, creating a pipeline of processes which are linked by their standard output and standard input streams.</p><p>For example, if we want to run something like this:</p><blockquote><p>find . -name *.java -type f | wc -l</p></blockquote><p>What we&#39;d do is create a process builder for each isolated command and compose them into a pipeline</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span> builders <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;find&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*.java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
    <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;wc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-l&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span> processes <span class="token operator">=</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">.</span><span class="token function">startPipeline</span><span class="token punctuation">(</span>builders<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Process</span> last <span class="token operator">=</span> processes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>processes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// We can get lats process output to get the final results</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the example, we&#39;re searching for all the java files inside the src directory and piping the results into another process to count them.</p><h2 id="_2-3-2-redirecting-standard-input-and-output" tabindex="-1">2.3.2 Redirecting Standard Input and Output</h2><p>In the real world, we will probably want to capture the results of our running processes inside a log file for further analysis. Luckily the ProcessBuilder API has built-in support for exactly this.</p><p>By default, our process reads input from a pipe. We can access this pipe via the output stream returned by Process.getOutputStream().</p><p>However, as we&#39;ll see shortly, the standard output may be redirected to another source such as a file using the method <code>redirectOutput(File)</code>. In this case, getOutputStream() will return a ProcessBuilder.NullOutputStream.</p><p>Let&#39;s prepare an example to print out the version of Java. But this time let&#39;s redirect the output to a log file instead of the standard output pipe:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ProcessBuilder</span> processBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-version&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

processBuilder<span class="token punctuation">.</span><span class="token function">redirectErrorStream</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">File</span> log <span class="token operator">=</span> folder<span class="token punctuation">.</span><span class="token function">newFile</span><span class="token punctuation">(</span><span class="token string">&quot;java-version.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
processBuilder<span class="token punctuation">.</span><span class="token function">redirectOutput</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Process</span> process <span class="token operator">=</span> processBuilder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example, we create a new temporary file called log and tell our ProcessBuilder to redirect output to this file destination.</p><p>Now let&#39;s take a look at a slight variation on this example. For instance when we wish to <code>append to</code> a log file rather than create a new one each time:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">File</span> log <span class="token operator">=</span> tempFolder<span class="token punctuation">.</span><span class="token function">newFile</span><span class="token punctuation">(</span><span class="token string">&quot;java-version-append.log&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
processBuilder<span class="token punctuation">.</span><span class="token function">redirectErrorStream</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
processBuilder<span class="token punctuation">.</span><span class="token function">redirectOutput</span><span class="token punctuation">(</span><span class="token class-name">Redirect</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span>log<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s also important to mention the call to <code>redirectErrorStream(true)</code>. In case of any errors, the error output will be merged into the normal process output file.</p><p>We can also redirect error stream an input stream for the subprocess with methods</p><ul><li>redirectError(File)</li><li>redirectInput(File)</li></ul><p>And for each of them we can also set the following redirections</p><ul><li>Redirect.to(File);</li><li>Redirect.from(File);</li><li>Redirect.appendTo(File);</li><li>Redirect.DISCARD</li></ul><h2 id="_2-3-3-current-java-process-information" tabindex="-1">2.3.3 Current Java Process Information</h2><p>We can now obtain a lot of information about the process via the API <code>java.lang.ProcessHandle.Info</code> API:</p><ul><li>the command used to start the process</li><li>the arguments of the command</li><li>time instant when the process was started</li><li>total time spent by it and the user who created it</li></ul><p>Here&#39;s how we can do that</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ProcessHandle</span> processHandle <span class="token operator">=</span> <span class="token class-name">ProcessHandle</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ProcessHandle<span class="token punctuation">.</span>Info</span> processInfo <span class="token operator">=</span> processHandle<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;PID: &quot;</span> <span class="token operator">+</span> processHandle<span class="token punctuation">.</span><span class="token function">pid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Arguments: &quot;</span> <span class="token operator">+</span> processInfo<span class="token punctuation">.</span><span class="token function">arguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Command: &quot;</span> <span class="token operator">+</span> processInfo<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Instant: &quot;</span> <span class="token operator">+</span> processInfo<span class="token punctuation">.</span><span class="token function">startInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Total CPU duration: &quot;</span> <span class="token operator">+</span> processInfo<span class="token punctuation">.</span><span class="token function">totalCpuDuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;User: &quot;</span> <span class="token operator">+</span> processInfo<span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is also possible to get the process information of a newly spawned process. In this case, after we spawn the process and get an instance of the <code>java.lang.Process</code>, we invoke the <code>toHandle()</code> method on it to get an instance of java.lang.ProcessHandle.</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Process</span> process <span class="token operator">=</span> processBuilder<span class="token punctuation">.</span><span class="token function">inheritIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ProcessHandle</span> processHandle <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">toHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The rest of the details remain the same as in the section above</p>`,45);function D(E,L){const i=p("DownloadPDF-component"),l=p("DocumentCover-component"),t=p("router-link"),c=p("ExternalLinkIcon");return k(),m("div",null,[s(i),s(l,{titulo:"2.3 Handling Process Streams"}),h,n("nav",g,[n("ul",null,[n("li",null,[s(t,{to:"#_2-3-1-redirecting-standard-input-and-output"},{default:e(()=>[f]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#getinputstream"},{default:e(()=>[b]),_:1})]),n("li",null,[s(t,{to:"#geterrorstream"},{default:e(()=>[w]),_:1})]),n("li",null,[s(t,{to:"#getoutputstream"},{default:e(()=>[y]),_:1})]),n("li",null,[s(t,{to:"#inheriting-the-i-o-of-the-parent-process"},{default:e(()=>[_]),_:1})]),n("li",null,[s(t,{to:"#pipelines"},{default:e(()=>[q]),_:1})])])]),n("li",null,[s(t,{to:"#_2-3-2-redirecting-standard-input-and-output"},{default:e(()=>[I]),_:1})]),n("li",null,[s(t,{to:"#_2-3-3-current-java-process-information"},{default:e(()=>[P]),_:1})])])]),S,n("p",null,[n("a",j,[x,s(c)]),B]),O,n("p",null,[n("a",R,[F,s(c)]),W]),T])}const A=d(v,[["render",D],["__file","iostreams.html.vue"]]);export{A as default};
